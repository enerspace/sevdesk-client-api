<?php
/**
 * ExportApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ExportApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExportApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation exportContactCsv
     *
     * Export the specified contact as csv
     *
     * @param  int $contact_id Id of the contact you want to export (required)
     * @param  string $contact_object_name Model name which is exported (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function exportContactCsv($contact_id, $contact_object_name, $download = 'true')
    {
        list($response) = $this->exportContactCsvWithHttpInfo($contact_id, $contact_object_name, $download);
        return $response;
    }

    /**
     * Operation exportContactCsvWithHttpInfo
     *
     * Export the specified contact as csv
     *
     * @param  int $contact_id Id of the contact you want to export (required)
     * @param  string $contact_object_name Model name which is exported (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportContactCsvWithHttpInfo($contact_id, $contact_object_name, $download = 'true')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportContactCsvRequest($contact_id, $contact_object_name, $download);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportContactCsvAsync
     *
     * Export the specified contact as csv
     *
     * @param  int $contact_id Id of the contact you want to export (required)
     * @param  string $contact_object_name Model name which is exported (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportContactCsvAsync($contact_id, $contact_object_name, $download = 'true')
    {
        return $this->exportContactCsvAsyncWithHttpInfo($contact_id, $contact_object_name, $download)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportContactCsvAsyncWithHttpInfo
     *
     * Export the specified contact as csv
     *
     * @param  int $contact_id Id of the contact you want to export (required)
     * @param  string $contact_object_name Model name which is exported (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportContactCsvAsyncWithHttpInfo($contact_id, $contact_object_name, $download = 'true')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportContactCsvRequest($contact_id, $contact_object_name, $download);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportContactCsv'
     *
     * @param  int $contact_id Id of the contact you want to export (required)
     * @param  string $contact_object_name Model name which is exported (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportContactCsvRequest($contact_id, $contact_object_name, $download = 'true')
    {
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling exportContactCsv'
            );
        }
        // verify the required parameter 'contact_object_name' is set
        if ($contact_object_name === null || (is_array($contact_object_name) && count($contact_object_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_object_name when calling exportContactCsv'
            );
        }

        $resourcePath = '/Export/contactCsv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($contact_id !== null) {
            $queryParams['contact[id]'] = ObjectSerializer::toQueryValue($contact_id);
        }
        // query params
        if ($contact_object_name !== null) {
            $queryParams['contact[objectName]'] = ObjectSerializer::toQueryValue($contact_object_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportContactListCsv
     *
     * Export the contact list as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported contacts (optional, default to 99999)
     * @param  bool $sev_query_filter_depth Specify if companies and persons (true) or only persons (false) should be exported (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function exportContactListCsv($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_depth = 'true')
    {
        list($response) = $this->exportContactListCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_depth);
        return $response;
    }

    /**
     * Operation exportContactListCsvWithHttpInfo
     *
     * Export the contact list as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported contacts (optional, default to 99999)
     * @param  bool $sev_query_filter_depth Specify if companies and persons (true) or only persons (false) should be exported (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportContactListCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_depth = 'true')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportContactListCsvRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_depth);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportContactListCsvAsync
     *
     * Export the contact list as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported contacts (optional, default to 99999)
     * @param  bool $sev_query_filter_depth Specify if companies and persons (true) or only persons (false) should be exported (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportContactListCsvAsync($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_depth = 'true')
    {
        return $this->exportContactListCsvAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_depth)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportContactListCsvAsyncWithHttpInfo
     *
     * Export the contact list as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported contacts (optional, default to 99999)
     * @param  bool $sev_query_filter_depth Specify if companies and persons (true) or only persons (false) should be exported (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportContactListCsvAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_depth = 'true')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportContactListCsvRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_depth);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportContactListCsv'
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported contacts (optional, default to 99999)
     * @param  bool $sev_query_filter_depth Specify if companies and persons (true) or only persons (false) should be exported (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportContactListCsvRequest($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_depth = 'true')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null || (is_array($sev_query_model_name) && count($sev_query_model_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_model_name when calling exportContactListCsv'
            );
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null || (is_array($sev_query_object_name) && count($sev_query_object_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_object_name when calling exportContactListCsv'
            );
        }

        $resourcePath = '/Export/contactListCsv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = ObjectSerializer::toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_filter_depth !== null) {
            $queryParams['sevQuery[filter][depth]'] = ObjectSerializer::toQueryValue($sev_query_filter_depth);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = ObjectSerializer::toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = ObjectSerializer::toQueryValue($sev_query_object_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportDatev
     *
     * Datev export as zip with csv´s
     *
     * @param  string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the datev export (required)
     * @param  string $end Specify the end date for the datev export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  string $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function exportDatev($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        list($response) = $this->exportDatevWithHttpInfo($scope, $start, $end, $with_enshrined, $enshrine, $download);
        return $response;
    }

    /**
     * Operation exportDatevWithHttpInfo
     *
     * Datev export as zip with csv´s
     *
     * @param  string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the datev export (required)
     * @param  string $end Specify the end date for the datev export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  string $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportDatevWithHttpInfo($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportDatevRequest($scope, $start, $end, $with_enshrined, $enshrine, $download);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportDatevAsync
     *
     * Datev export as zip with csv´s
     *
     * @param  string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the datev export (required)
     * @param  string $end Specify the end date for the datev export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  string $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportDatevAsync($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        return $this->exportDatevAsyncWithHttpInfo($scope, $start, $end, $with_enshrined, $enshrine, $download)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportDatevAsyncWithHttpInfo
     *
     * Datev export as zip with csv´s
     *
     * @param  string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the datev export (required)
     * @param  string $end Specify the end date for the datev export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  string $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportDatevAsyncWithHttpInfo($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportDatevRequest($scope, $start, $end, $with_enshrined, $enshrine, $download);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportDatev'
     *
     * @param  string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the datev export (required)
     * @param  string $end Specify the end date for the datev export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  string $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportDatevRequest($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        // verify the required parameter 'scope' is set
        if ($scope === null || (is_array($scope) && count($scope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scope when calling exportDatev'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling exportDatev'
            );
        }
        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling exportDatev'
            );
        }
        // verify the required parameter 'with_enshrined' is set
        if ($with_enshrined === null || (is_array($with_enshrined) && count($with_enshrined) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $with_enshrined when calling exportDatev'
            );
        }
        // verify the required parameter 'enshrine' is set
        if ($enshrine === null || (is_array($enshrine) && count($enshrine) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enshrine when calling exportDatev'
            );
        }

        $resourcePath = '/Export/datev';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($with_enshrined !== null) {
            $queryParams['withEnshrined'] = ObjectSerializer::toQueryValue($with_enshrined);
        }
        // query params
        if ($enshrine !== null) {
            $queryParams['enshrine'] = ObjectSerializer::toQueryValue($enshrine);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportDatevZip
     *
     * Export zip for voucher upload
     *
     * @param  string $scope Define what you want to include in the zip export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the zip export (required)
     * @param  string $end Specify the end date for the zip export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function exportDatevZip($scope, $start, $end, $with_enshrined, $download = 'true')
    {
        list($response) = $this->exportDatevZipWithHttpInfo($scope, $start, $end, $with_enshrined, $download);
        return $response;
    }

    /**
     * Operation exportDatevZipWithHttpInfo
     *
     * Export zip for voucher upload
     *
     * @param  string $scope Define what you want to include in the zip export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the zip export (required)
     * @param  string $end Specify the end date for the zip export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportDatevZipWithHttpInfo($scope, $start, $end, $with_enshrined, $download = 'true')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportDatevZipRequest($scope, $start, $end, $with_enshrined, $download);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportDatevZipAsync
     *
     * Export zip for voucher upload
     *
     * @param  string $scope Define what you want to include in the zip export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the zip export (required)
     * @param  string $end Specify the end date for the zip export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportDatevZipAsync($scope, $start, $end, $with_enshrined, $download = 'true')
    {
        return $this->exportDatevZipAsyncWithHttpInfo($scope, $start, $end, $with_enshrined, $download)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportDatevZipAsyncWithHttpInfo
     *
     * Export zip for voucher upload
     *
     * @param  string $scope Define what you want to include in the zip export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the zip export (required)
     * @param  string $end Specify the end date for the zip export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportDatevZipAsyncWithHttpInfo($scope, $start, $end, $with_enshrined, $download = 'true')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportDatevZipRequest($scope, $start, $end, $with_enshrined, $download);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportDatevZip'
     *
     * @param  string $scope Define what you want to include in the zip export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the zip export (required)
     * @param  string $end Specify the end date for the zip export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportDatevZipRequest($scope, $start, $end, $with_enshrined, $download = 'true')
    {
        // verify the required parameter 'scope' is set
        if ($scope === null || (is_array($scope) && count($scope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scope when calling exportDatevZip'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling exportDatevZip'
            );
        }
        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling exportDatevZip'
            );
        }
        // verify the required parameter 'with_enshrined' is set
        if ($with_enshrined === null || (is_array($with_enshrined) && count($with_enshrined) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $with_enshrined when calling exportDatevZip'
            );
        }

        $resourcePath = '/Export/datevZip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($with_enshrined !== null) {
            $queryParams['withEnshrined'] = ObjectSerializer::toQueryValue($with_enshrined);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportInventoryPartLogList
     *
     * Export the inventory part log as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported part log (optional, default to 99999)
     * @param  int $sev_query_filter_part_id Id of the part for which you want to export the part log (optional)
     * @param  string $sev_query_filter_part_object_name Object name of part (optional, default to Part)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function exportInventoryPartLogList($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_part_id = null, $sev_query_filter_part_object_name = 'Part')
    {
        list($response) = $this->exportInventoryPartLogListWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_part_id, $sev_query_filter_part_object_name);
        return $response;
    }

    /**
     * Operation exportInventoryPartLogListWithHttpInfo
     *
     * Export the inventory part log as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported part log (optional, default to 99999)
     * @param  int $sev_query_filter_part_id Id of the part for which you want to export the part log (optional)
     * @param  string $sev_query_filter_part_object_name Object name of part (optional, default to Part)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportInventoryPartLogListWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_part_id = null, $sev_query_filter_part_object_name = 'Part')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportInventoryPartLogListRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_part_id, $sev_query_filter_part_object_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportInventoryPartLogListAsync
     *
     * Export the inventory part log as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported part log (optional, default to 99999)
     * @param  int $sev_query_filter_part_id Id of the part for which you want to export the part log (optional)
     * @param  string $sev_query_filter_part_object_name Object name of part (optional, default to Part)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInventoryPartLogListAsync($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_part_id = null, $sev_query_filter_part_object_name = 'Part')
    {
        return $this->exportInventoryPartLogListAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_part_id, $sev_query_filter_part_object_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportInventoryPartLogListAsyncWithHttpInfo
     *
     * Export the inventory part log as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported part log (optional, default to 99999)
     * @param  int $sev_query_filter_part_id Id of the part for which you want to export the part log (optional)
     * @param  string $sev_query_filter_part_object_name Object name of part (optional, default to Part)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInventoryPartLogListAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_part_id = null, $sev_query_filter_part_object_name = 'Part')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportInventoryPartLogListRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_part_id, $sev_query_filter_part_object_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportInventoryPartLogList'
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported part log (optional, default to 99999)
     * @param  int $sev_query_filter_part_id Id of the part for which you want to export the part log (optional)
     * @param  string $sev_query_filter_part_object_name Object name of part (optional, default to Part)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportInventoryPartLogListRequest($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_part_id = null, $sev_query_filter_part_object_name = 'Part')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null || (is_array($sev_query_model_name) && count($sev_query_model_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_model_name when calling exportInventoryPartLogList'
            );
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null || (is_array($sev_query_object_name) && count($sev_query_object_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_object_name when calling exportInventoryPartLogList'
            );
        }

        $resourcePath = '/Export/inventoryPartLogListCsv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = ObjectSerializer::toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_filter_part_id !== null) {
            $queryParams['sevQuery[filter][part][id]'] = ObjectSerializer::toQueryValue($sev_query_filter_part_id);
        }
        // query params
        if ($sev_query_filter_part_object_name !== null) {
            $queryParams['sevQuery[filter][part][objectName]'] = ObjectSerializer::toQueryValue($sev_query_filter_part_object_name);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = ObjectSerializer::toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = ObjectSerializer::toQueryValue($sev_query_object_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportInvoiceCsv
     *
     * Export the invoice list as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported invoices (optional, default to 99999)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function exportInvoiceCsv($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        list($response) = $this->exportInvoiceCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit);
        return $response;
    }

    /**
     * Operation exportInvoiceCsvWithHttpInfo
     *
     * Export the invoice list as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported invoices (optional, default to 99999)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportInvoiceCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportInvoiceCsvRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportInvoiceCsvAsync
     *
     * Export the invoice list as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported invoices (optional, default to 99999)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInvoiceCsvAsync($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        return $this->exportInvoiceCsvAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportInvoiceCsvAsyncWithHttpInfo
     *
     * Export the invoice list as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported invoices (optional, default to 99999)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInvoiceCsvAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportInvoiceCsvRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportInvoiceCsv'
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported invoices (optional, default to 99999)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportInvoiceCsvRequest($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null || (is_array($sev_query_model_name) && count($sev_query_model_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_model_name when calling exportInvoiceCsv'
            );
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null || (is_array($sev_query_object_name) && count($sev_query_object_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_object_name when calling exportInvoiceCsv'
            );
        }

        $resourcePath = '/Export/invoiceCsv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = ObjectSerializer::toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = ObjectSerializer::toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = ObjectSerializer::toQueryValue($sev_query_object_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportInvoiceZip
     *
     * Export the invoice list as zip with csv´s
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported invoices (optional, default to 50)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function exportInvoiceZip($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '50')
    {
        list($response) = $this->exportInvoiceZipWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit);
        return $response;
    }

    /**
     * Operation exportInvoiceZipWithHttpInfo
     *
     * Export the invoice list as zip with csv´s
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported invoices (optional, default to 50)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportInvoiceZipWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '50')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportInvoiceZipRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportInvoiceZipAsync
     *
     * Export the invoice list as zip with csv´s
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported invoices (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInvoiceZipAsync($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '50')
    {
        return $this->exportInvoiceZipAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportInvoiceZipAsyncWithHttpInfo
     *
     * Export the invoice list as zip with csv´s
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported invoices (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInvoiceZipAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '50')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportInvoiceZipRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportInvoiceZip'
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported invoices (optional, default to 50)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportInvoiceZipRequest($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '50')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null || (is_array($sev_query_model_name) && count($sev_query_model_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_model_name when calling exportInvoiceZip'
            );
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null || (is_array($sev_query_object_name) && count($sev_query_object_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_object_name when calling exportInvoiceZip'
            );
        }

        $resourcePath = '/Export/invoiceZip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = ObjectSerializer::toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = ObjectSerializer::toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = ObjectSerializer::toQueryValue($sev_query_object_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportPartCsv
     *
     * Export the parts as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported part (optional, default to 99999)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function exportPartCsv($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        list($response) = $this->exportPartCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit);
        return $response;
    }

    /**
     * Operation exportPartCsvWithHttpInfo
     *
     * Export the parts as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported part (optional, default to 99999)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportPartCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportPartCsvRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportPartCsvAsync
     *
     * Export the parts as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported part (optional, default to 99999)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportPartCsvAsync($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        return $this->exportPartCsvAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportPartCsvAsyncWithHttpInfo
     *
     * Export the parts as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported part (optional, default to 99999)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportPartCsvAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportPartCsvRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportPartCsv'
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported part (optional, default to 99999)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportPartCsvRequest($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null || (is_array($sev_query_model_name) && count($sev_query_model_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_model_name when calling exportPartCsv'
            );
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null || (is_array($sev_query_object_name) && count($sev_query_object_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_object_name when calling exportPartCsv'
            );
        }

        $resourcePath = '/Export/partCsv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = ObjectSerializer::toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = ObjectSerializer::toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = ObjectSerializer::toQueryValue($sev_query_object_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportPebe
     *
     * Pebe export as zip with csv´s
     *
     * @param  string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the pebe export (required)
     * @param  string $end Specify the end date for the pebe export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  string $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function exportPebe($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        list($response) = $this->exportPebeWithHttpInfo($scope, $start, $end, $with_enshrined, $enshrine, $download);
        return $response;
    }

    /**
     * Operation exportPebeWithHttpInfo
     *
     * Pebe export as zip with csv´s
     *
     * @param  string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the pebe export (required)
     * @param  string $end Specify the end date for the pebe export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  string $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportPebeWithHttpInfo($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportPebeRequest($scope, $start, $end, $with_enshrined, $enshrine, $download);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportPebeAsync
     *
     * Pebe export as zip with csv´s
     *
     * @param  string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the pebe export (required)
     * @param  string $end Specify the end date for the pebe export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  string $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportPebeAsync($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        return $this->exportPebeAsyncWithHttpInfo($scope, $start, $end, $with_enshrined, $enshrine, $download)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportPebeAsyncWithHttpInfo
     *
     * Pebe export as zip with csv´s
     *
     * @param  string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the pebe export (required)
     * @param  string $end Specify the end date for the pebe export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  string $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportPebeAsyncWithHttpInfo($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportPebeRequest($scope, $start, $end, $with_enshrined, $enshrine, $download);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportPebe'
     *
     * @param  string $scope Define what you want to include in the datev export. This parameter takes a string of 4 letters. Each stands for a model that should be included.    Possible letters are: **&#39;I&#39;** (Invoices), **&#39;V&#39;** (Vouchers), **&#39;D&#39;** (Depreciations), **&#39;T&#39;** (Transactions).    By providing one of those letter you specify that it should be included in the datev export. Some combinations are: &#39;IVDT&#39;, &#39;IVT&#39; ... (required)
     * @param  string $start Specify the start date for the pebe export (required)
     * @param  string $end Specify the end date for the pebe export (required)
     * @param  bool $with_enshrined Specify if you want to include enshrined models (required)
     * @param  string $enshrine Specify if you want to enshrine all models which were included in the export (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportPebeRequest($scope, $start, $end, $with_enshrined, $enshrine, $download = 'true')
    {
        // verify the required parameter 'scope' is set
        if ($scope === null || (is_array($scope) && count($scope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scope when calling exportPebe'
            );
        }
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling exportPebe'
            );
        }
        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling exportPebe'
            );
        }
        // verify the required parameter 'with_enshrined' is set
        if ($with_enshrined === null || (is_array($with_enshrined) && count($with_enshrined) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $with_enshrined when calling exportPebe'
            );
        }
        // verify the required parameter 'enshrine' is set
        if ($enshrine === null || (is_array($enshrine) && count($enshrine) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enshrine when calling exportPebe'
            );
        }

        $resourcePath = '/Export/pebe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($with_enshrined !== null) {
            $queryParams['withEnshrined'] = ObjectSerializer::toQueryValue($with_enshrined);
        }
        // query params
        if ($enshrine !== null) {
            $queryParams['enshrine'] = ObjectSerializer::toQueryValue($enshrine);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportTransactionsCsv
     *
     * Export the transactions as csv
     *
     * @param  bool $sev_query_filter_register Specifies if the register is included (required)
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  string $sev_query_order_entry_date Order in which you want to have the transactions listed (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $check_account_id Specify check account for which you want the transactions. Otherwise all transactions will be used (optional)
     * @param  string $check_account_object_name Check account model name (optional, default to CheckAccount)
     * @param  int $sev_query_limit Limit exported transactions (optional, default to 99999)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function exportTransactionsCsv($sev_query_filter_register, $sev_query_model_name, $sev_query_object_name, $sev_query_order_entry_date, $download = 'true', $check_account_id = null, $check_account_object_name = 'CheckAccount', $sev_query_limit = '99999')
    {
        list($response) = $this->exportTransactionsCsvWithHttpInfo($sev_query_filter_register, $sev_query_model_name, $sev_query_object_name, $sev_query_order_entry_date, $download, $check_account_id, $check_account_object_name, $sev_query_limit);
        return $response;
    }

    /**
     * Operation exportTransactionsCsvWithHttpInfo
     *
     * Export the transactions as csv
     *
     * @param  bool $sev_query_filter_register Specifies if the register is included (required)
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  string $sev_query_order_entry_date Order in which you want to have the transactions listed (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $check_account_id Specify check account for which you want the transactions. Otherwise all transactions will be used (optional)
     * @param  string $check_account_object_name Check account model name (optional, default to CheckAccount)
     * @param  int $sev_query_limit Limit exported transactions (optional, default to 99999)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportTransactionsCsvWithHttpInfo($sev_query_filter_register, $sev_query_model_name, $sev_query_object_name, $sev_query_order_entry_date, $download = 'true', $check_account_id = null, $check_account_object_name = 'CheckAccount', $sev_query_limit = '99999')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportTransactionsCsvRequest($sev_query_filter_register, $sev_query_model_name, $sev_query_object_name, $sev_query_order_entry_date, $download, $check_account_id, $check_account_object_name, $sev_query_limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportTransactionsCsvAsync
     *
     * Export the transactions as csv
     *
     * @param  bool $sev_query_filter_register Specifies if the register is included (required)
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  string $sev_query_order_entry_date Order in which you want to have the transactions listed (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $check_account_id Specify check account for which you want the transactions. Otherwise all transactions will be used (optional)
     * @param  string $check_account_object_name Check account model name (optional, default to CheckAccount)
     * @param  int $sev_query_limit Limit exported transactions (optional, default to 99999)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportTransactionsCsvAsync($sev_query_filter_register, $sev_query_model_name, $sev_query_object_name, $sev_query_order_entry_date, $download = 'true', $check_account_id = null, $check_account_object_name = 'CheckAccount', $sev_query_limit = '99999')
    {
        return $this->exportTransactionsCsvAsyncWithHttpInfo($sev_query_filter_register, $sev_query_model_name, $sev_query_object_name, $sev_query_order_entry_date, $download, $check_account_id, $check_account_object_name, $sev_query_limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportTransactionsCsvAsyncWithHttpInfo
     *
     * Export the transactions as csv
     *
     * @param  bool $sev_query_filter_register Specifies if the register is included (required)
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  string $sev_query_order_entry_date Order in which you want to have the transactions listed (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $check_account_id Specify check account for which you want the transactions. Otherwise all transactions will be used (optional)
     * @param  string $check_account_object_name Check account model name (optional, default to CheckAccount)
     * @param  int $sev_query_limit Limit exported transactions (optional, default to 99999)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportTransactionsCsvAsyncWithHttpInfo($sev_query_filter_register, $sev_query_model_name, $sev_query_object_name, $sev_query_order_entry_date, $download = 'true', $check_account_id = null, $check_account_object_name = 'CheckAccount', $sev_query_limit = '99999')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportTransactionsCsvRequest($sev_query_filter_register, $sev_query_model_name, $sev_query_object_name, $sev_query_order_entry_date, $download, $check_account_id, $check_account_object_name, $sev_query_limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportTransactionsCsv'
     *
     * @param  bool $sev_query_filter_register Specifies if the register is included (required)
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  string $sev_query_order_entry_date Order in which you want to have the transactions listed (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $check_account_id Specify check account for which you want the transactions. Otherwise all transactions will be used (optional)
     * @param  string $check_account_object_name Check account model name (optional, default to CheckAccount)
     * @param  int $sev_query_limit Limit exported transactions (optional, default to 99999)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportTransactionsCsvRequest($sev_query_filter_register, $sev_query_model_name, $sev_query_object_name, $sev_query_order_entry_date, $download = 'true', $check_account_id = null, $check_account_object_name = 'CheckAccount', $sev_query_limit = '99999')
    {
        // verify the required parameter 'sev_query_filter_register' is set
        if ($sev_query_filter_register === null || (is_array($sev_query_filter_register) && count($sev_query_filter_register) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_filter_register when calling exportTransactionsCsv'
            );
        }
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null || (is_array($sev_query_model_name) && count($sev_query_model_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_model_name when calling exportTransactionsCsv'
            );
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null || (is_array($sev_query_object_name) && count($sev_query_object_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_object_name when calling exportTransactionsCsv'
            );
        }
        // verify the required parameter 'sev_query_order_entry_date' is set
        if ($sev_query_order_entry_date === null || (is_array($sev_query_order_entry_date) && count($sev_query_order_entry_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_order_entry_date when calling exportTransactionsCsv'
            );
        }

        $resourcePath = '/Export/transactionsCsv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($check_account_id !== null) {
            $queryParams['checkAccount[id]'] = ObjectSerializer::toQueryValue($check_account_id);
        }
        // query params
        if ($check_account_object_name !== null) {
            $queryParams['checkAccount[objectName]'] = ObjectSerializer::toQueryValue($check_account_object_name);
        }
        // query params
        if ($sev_query_filter_register !== null) {
            $queryParams['sevQuery[filter][register]'] = ObjectSerializer::toQueryValue($sev_query_filter_register);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = ObjectSerializer::toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = ObjectSerializer::toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = ObjectSerializer::toQueryValue($sev_query_object_name);
        }
        // query params
        if ($sev_query_order_entry_date !== null) {
            $queryParams['sevQuery[order][entryDate]'] = ObjectSerializer::toQueryValue($sev_query_order_entry_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportVoucherListCsv
     *
     * Export the voucher list as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param  string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param  string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function exportVoucherListCsv($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        list($response) = $this->exportVoucherListCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_start_date, $sev_query_filter_voucher_type);
        return $response;
    }

    /**
     * Operation exportVoucherListCsvWithHttpInfo
     *
     * Export the voucher list as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param  string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param  string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportVoucherListCsvWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportVoucherListCsvRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_start_date, $sev_query_filter_voucher_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportVoucherListCsvAsync
     *
     * Export the voucher list as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param  string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param  string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportVoucherListCsvAsync($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        return $this->exportVoucherListCsvAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_start_date, $sev_query_filter_voucher_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportVoucherListCsvAsyncWithHttpInfo
     *
     * Export the voucher list as csv
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param  string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param  string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportVoucherListCsvAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportVoucherListCsvRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_start_date, $sev_query_filter_voucher_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportVoucherListCsv'
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param  string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param  string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportVoucherListCsvRequest($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null || (is_array($sev_query_model_name) && count($sev_query_model_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_model_name when calling exportVoucherListCsv'
            );
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null || (is_array($sev_query_object_name) && count($sev_query_object_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_object_name when calling exportVoucherListCsv'
            );
        }

        $resourcePath = '/Export/voucherListCsv';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = ObjectSerializer::toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_filter_start_date !== null) {
            $queryParams['sevQuery[filter][startDate]'] = ObjectSerializer::toQueryValue($sev_query_filter_start_date);
        }
        // query params
        if ($sev_query_filter_voucher_type !== null) {
            $queryParams['sevQuery[filter][voucherType]'] = ObjectSerializer::toQueryValue($sev_query_filter_voucher_type);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = ObjectSerializer::toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = ObjectSerializer::toQueryValue($sev_query_object_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportVoucherZip
     *
     * Export the voucher list as zip with csv´s
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param  string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param  string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function exportVoucherZip($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        list($response) = $this->exportVoucherZipWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_start_date, $sev_query_filter_voucher_type);
        return $response;
    }

    /**
     * Operation exportVoucherZipWithHttpInfo
     *
     * Export the voucher list as zip with csv´s
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param  string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param  string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportVoucherZipWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportVoucherZipRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_start_date, $sev_query_filter_voucher_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportVoucherZipAsync
     *
     * Export the voucher list as zip with csv´s
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param  string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param  string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportVoucherZipAsync($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        return $this->exportVoucherZipAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_start_date, $sev_query_filter_voucher_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportVoucherZipAsyncWithHttpInfo
     *
     * Export the voucher list as zip with csv´s
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param  string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param  string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportVoucherZipAsyncWithHttpInfo($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        $returnType = '\SplFileObject';
        $request = $this->exportVoucherZipRequest($sev_query_model_name, $sev_query_object_name, $download, $sev_query_limit, $sev_query_filter_start_date, $sev_query_filter_voucher_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportVoucherZip'
     *
     * @param  string $sev_query_model_name Model name which is exported (required)
     * @param  string $sev_query_object_name SevQuery object name (required)
     * @param  bool $download Specifies if the document is downloaded (optional, default to true)
     * @param  int $sev_query_limit Limit exported vouchers (optional, default to 99999)
     * @param  string $sev_query_filter_start_date Start date of the voucher list (optional, default to )
     * @param  string $sev_query_filter_voucher_type Type of vouchers you want to export (optional, default to VOU)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportVoucherZipRequest($sev_query_model_name, $sev_query_object_name, $download = 'true', $sev_query_limit = '99999', $sev_query_filter_start_date = '', $sev_query_filter_voucher_type = 'VOU')
    {
        // verify the required parameter 'sev_query_model_name' is set
        if ($sev_query_model_name === null || (is_array($sev_query_model_name) && count($sev_query_model_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_model_name when calling exportVoucherZip'
            );
        }
        // verify the required parameter 'sev_query_object_name' is set
        if ($sev_query_object_name === null || (is_array($sev_query_object_name) && count($sev_query_object_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sev_query_object_name when calling exportVoucherZip'
            );
        }

        $resourcePath = '/Export/voucherZip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($sev_query_limit !== null) {
            $queryParams['sevQuery[limit]'] = ObjectSerializer::toQueryValue($sev_query_limit);
        }
        // query params
        if ($sev_query_filter_start_date !== null) {
            $queryParams['sevQuery[filter][startDate]'] = ObjectSerializer::toQueryValue($sev_query_filter_start_date);
        }
        // query params
        if ($sev_query_filter_voucher_type !== null) {
            $queryParams['sevQuery[filter][voucherType]'] = ObjectSerializer::toQueryValue($sev_query_filter_voucher_type);
        }
        // query params
        if ($sev_query_model_name !== null) {
            $queryParams['sevQuery[modelName]'] = ObjectSerializer::toQueryValue($sev_query_model_name);
        }
        // query params
        if ($sev_query_object_name !== null) {
            $queryParams['sevQuery[objectName]'] = ObjectSerializer::toQueryValue($sev_query_object_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
