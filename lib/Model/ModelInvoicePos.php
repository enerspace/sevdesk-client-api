<?php
/**
 * ModelInvoicePos
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelInvoicePos Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelInvoicePos implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model_InvoicePos';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create' => '\DateTime',
        'update' => '\DateTime',
        'invoice' => '\Swagger\Client\Model\ModelInvoice',
        'part' => '\Swagger\Client\Model\ModelPart',
        'quantity' => 'float',
        'price' => 'float',
        'name' => 'string',
        'priority' => 'int',
        'unity' => '\Swagger\Client\Model\ModelUnity',
        'sev_client' => 'object',
        'position_number' => 'int',
        'text' => 'string',
        'discount' => 'float',
        'tax_rate' => 'float',
        'temporary' => 'bool',
        'sum_net' => 'float',
        'sum_gross' => 'float',
        'sum_discount' => 'float',
        'sum_tax' => 'float',
        'sum_net_accounting' => 'float',
        'sum_tax_accounting' => 'float',
        'sum_gross_accounting' => 'float',
        'price_net' => 'float',
        'price_gross' => 'float',
        'price_tax' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create' => 'date-time',
        'update' => 'date-time',
        'invoice' => null,
        'part' => null,
        'quantity' => 'float',
        'price' => 'float',
        'name' => null,
        'priority' => null,
        'unity' => null,
        'sev_client' => null,
        'position_number' => null,
        'text' => null,
        'discount' => 'float',
        'tax_rate' => 'float',
        'temporary' => null,
        'sum_net' => 'float',
        'sum_gross' => 'float',
        'sum_discount' => 'float',
        'sum_tax' => 'float',
        'sum_net_accounting' => 'float',
        'sum_tax_accounting' => 'float',
        'sum_gross_accounting' => 'float',
        'price_net' => 'float',
        'price_gross' => 'float',
        'price_tax' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create' => 'create',
        'update' => 'update',
        'invoice' => 'invoice',
        'part' => 'part',
        'quantity' => 'quantity',
        'price' => 'price',
        'name' => 'name',
        'priority' => 'priority',
        'unity' => 'unity',
        'sev_client' => 'sevClient',
        'position_number' => 'positionNumber',
        'text' => 'text',
        'discount' => 'discount',
        'tax_rate' => 'taxRate',
        'temporary' => 'temporary',
        'sum_net' => 'sumNet',
        'sum_gross' => 'sumGross',
        'sum_discount' => 'sumDiscount',
        'sum_tax' => 'sumTax',
        'sum_net_accounting' => 'sumNetAccounting',
        'sum_tax_accounting' => 'sumTaxAccounting',
        'sum_gross_accounting' => 'sumGrossAccounting',
        'price_net' => 'priceNet',
        'price_gross' => 'priceGross',
        'price_tax' => 'priceTax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create' => 'setCreate',
        'update' => 'setUpdate',
        'invoice' => 'setInvoice',
        'part' => 'setPart',
        'quantity' => 'setQuantity',
        'price' => 'setPrice',
        'name' => 'setName',
        'priority' => 'setPriority',
        'unity' => 'setUnity',
        'sev_client' => 'setSevClient',
        'position_number' => 'setPositionNumber',
        'text' => 'setText',
        'discount' => 'setDiscount',
        'tax_rate' => 'setTaxRate',
        'temporary' => 'setTemporary',
        'sum_net' => 'setSumNet',
        'sum_gross' => 'setSumGross',
        'sum_discount' => 'setSumDiscount',
        'sum_tax' => 'setSumTax',
        'sum_net_accounting' => 'setSumNetAccounting',
        'sum_tax_accounting' => 'setSumTaxAccounting',
        'sum_gross_accounting' => 'setSumGrossAccounting',
        'price_net' => 'setPriceNet',
        'price_gross' => 'setPriceGross',
        'price_tax' => 'setPriceTax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create' => 'getCreate',
        'update' => 'getUpdate',
        'invoice' => 'getInvoice',
        'part' => 'getPart',
        'quantity' => 'getQuantity',
        'price' => 'getPrice',
        'name' => 'getName',
        'priority' => 'getPriority',
        'unity' => 'getUnity',
        'sev_client' => 'getSevClient',
        'position_number' => 'getPositionNumber',
        'text' => 'getText',
        'discount' => 'getDiscount',
        'tax_rate' => 'getTaxRate',
        'temporary' => 'getTemporary',
        'sum_net' => 'getSumNet',
        'sum_gross' => 'getSumGross',
        'sum_discount' => 'getSumDiscount',
        'sum_tax' => 'getSumTax',
        'sum_net_accounting' => 'getSumNetAccounting',
        'sum_tax_accounting' => 'getSumTaxAccounting',
        'sum_gross_accounting' => 'getSumGrossAccounting',
        'price_net' => 'getPriceNet',
        'price_gross' => 'getPriceGross',
        'price_tax' => 'getPriceTax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create'] = isset($data['create']) ? $data['create'] : null;
        $this->container['update'] = isset($data['update']) ? $data['update'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['part'] = isset($data['part']) ? $data['part'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['unity'] = isset($data['unity']) ? $data['unity'] : null;
        $this->container['sev_client'] = isset($data['sev_client']) ? $data['sev_client'] : null;
        $this->container['position_number'] = isset($data['position_number']) ? $data['position_number'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['temporary'] = isset($data['temporary']) ? $data['temporary'] : null;
        $this->container['sum_net'] = isset($data['sum_net']) ? $data['sum_net'] : null;
        $this->container['sum_gross'] = isset($data['sum_gross']) ? $data['sum_gross'] : null;
        $this->container['sum_discount'] = isset($data['sum_discount']) ? $data['sum_discount'] : null;
        $this->container['sum_tax'] = isset($data['sum_tax']) ? $data['sum_tax'] : null;
        $this->container['sum_net_accounting'] = isset($data['sum_net_accounting']) ? $data['sum_net_accounting'] : null;
        $this->container['sum_tax_accounting'] = isset($data['sum_tax_accounting']) ? $data['sum_tax_accounting'] : null;
        $this->container['sum_gross_accounting'] = isset($data['sum_gross_accounting']) ? $data['sum_gross_accounting'] : null;
        $this->container['price_net'] = isset($data['price_net']) ? $data['price_net'] : null;
        $this->container['price_gross'] = isset($data['price_gross']) ? $data['price_gross'] : null;
        $this->container['price_tax'] = isset($data['price_tax']) ? $data['price_tax'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create
     *
     * @return \DateTime
     */
    public function getCreate()
    {
        return $this->container['create'];
    }

    /**
     * Sets create
     *
     * @param \DateTime $create creation date of the invoice position
     *
     * @return $this
     */
    public function setCreate($create)
    {
        $this->container['create'] = $create;

        return $this;
    }

    /**
     * Gets update
     *
     * @return \DateTime
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param \DateTime $update date the invoice position was last updated
     *
     * @return $this
     */
    public function setUpdate($update)
    {
        $this->container['update'] = $update;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \Swagger\Client\Model\ModelInvoice
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \Swagger\Client\Model\ModelInvoice $invoice the Model_Invoice the invoice position belongs to
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets part
     *
     * @return \Swagger\Client\Model\ModelPart
     */
    public function getPart()
    {
        return $this->container['part'];
    }

    /**
     * Sets part
     *
     * @param \Swagger\Client\Model\ModelPart $part the product/part which belongs to the invoice position
     *
     * @return $this
     */
    public function setPart($part)
    {
        $this->container['part'] = $part;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity the quantity of the product/part
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price the price of the product/part
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name the name of the product/part
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority 
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets unity
     *
     * @return \Swagger\Client\Model\ModelUnity
     */
    public function getUnity()
    {
        return $this->container['unity'];
    }

    /**
     * Sets unity
     *
     * @param \Swagger\Client\Model\ModelUnity $unity 
     *
     * @return $this
     */
    public function setUnity($unity)
    {
        $this->container['unity'] = $unity;

        return $this;
    }

    /**
     * Gets sev_client
     *
     * @return object
     */
    public function getSevClient()
    {
        return $this->container['sev_client'];
    }

    /**
     * Sets sev_client
     *
     * @param object $sev_client sevClient is the unique id every customer has and is used in nearly all operations
     *
     * @return $this
     */
    public function setSevClient($sev_client)
    {
        $this->container['sev_client'] = $sev_client;

        return $this;
    }

    /**
     * Gets position_number
     *
     * @return int
     */
    public function getPositionNumber()
    {
        return $this->container['position_number'];
    }

    /**
     * Sets position_number
     *
     * @param int $position_number 
     *
     * @return $this
     */
    public function setPositionNumber($position_number)
    {
        $this->container['position_number'] = $position_number;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text 
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float $discount does not get filled, discount is handled in the discount_model
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float $tax_rate tax rate in percent
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets temporary
     *
     * @return bool
     */
    public function getTemporary()
    {
        return $this->container['temporary'];
    }

    /**
     * Sets temporary
     *
     * @param bool $temporary 
     *
     * @return $this
     */
    public function setTemporary($temporary)
    {
        $this->container['temporary'] = $temporary;

        return $this;
    }

    /**
     * Gets sum_net
     *
     * @return float
     */
    public function getSumNet()
    {
        return $this->container['sum_net'];
    }

    /**
     * Sets sum_net
     *
     * @param float $sum_net 
     *
     * @return $this
     */
    public function setSumNet($sum_net)
    {
        $this->container['sum_net'] = $sum_net;

        return $this;
    }

    /**
     * Gets sum_gross
     *
     * @return float
     */
    public function getSumGross()
    {
        return $this->container['sum_gross'];
    }

    /**
     * Sets sum_gross
     *
     * @param float $sum_gross 
     *
     * @return $this
     */
    public function setSumGross($sum_gross)
    {
        $this->container['sum_gross'] = $sum_gross;

        return $this;
    }

    /**
     * Gets sum_discount
     *
     * @return float
     */
    public function getSumDiscount()
    {
        return $this->container['sum_discount'];
    }

    /**
     * Sets sum_discount
     *
     * @param float $sum_discount does not get filled, sumDiscount is handled in the discount_model
     *
     * @return $this
     */
    public function setSumDiscount($sum_discount)
    {
        $this->container['sum_discount'] = $sum_discount;

        return $this;
    }

    /**
     * Gets sum_tax
     *
     * @return float
     */
    public function getSumTax()
    {
        return $this->container['sum_tax'];
    }

    /**
     * Sets sum_tax
     *
     * @param float $sum_tax 
     *
     * @return $this
     */
    public function setSumTax($sum_tax)
    {
        $this->container['sum_tax'] = $sum_tax;

        return $this;
    }

    /**
     * Gets sum_net_accounting
     *
     * @return float
     */
    public function getSumNetAccounting()
    {
        return $this->container['sum_net_accounting'];
    }

    /**
     * Sets sum_net_accounting
     *
     * @param float $sum_net_accounting equals sumNet
     *
     * @return $this
     */
    public function setSumNetAccounting($sum_net_accounting)
    {
        $this->container['sum_net_accounting'] = $sum_net_accounting;

        return $this;
    }

    /**
     * Gets sum_tax_accounting
     *
     * @return float
     */
    public function getSumTaxAccounting()
    {
        return $this->container['sum_tax_accounting'];
    }

    /**
     * Sets sum_tax_accounting
     *
     * @param float $sum_tax_accounting equals sumTax
     *
     * @return $this
     */
    public function setSumTaxAccounting($sum_tax_accounting)
    {
        $this->container['sum_tax_accounting'] = $sum_tax_accounting;

        return $this;
    }

    /**
     * Gets sum_gross_accounting
     *
     * @return float
     */
    public function getSumGrossAccounting()
    {
        return $this->container['sum_gross_accounting'];
    }

    /**
     * Sets sum_gross_accounting
     *
     * @param float $sum_gross_accounting equals sumGross
     *
     * @return $this
     */
    public function setSumGrossAccounting($sum_gross_accounting)
    {
        $this->container['sum_gross_accounting'] = $sum_gross_accounting;

        return $this;
    }

    /**
     * Gets price_net
     *
     * @return float
     */
    public function getPriceNet()
    {
        return $this->container['price_net'];
    }

    /**
     * Sets price_net
     *
     * @param float $price_net net price of the product/part (one)
     *
     * @return $this
     */
    public function setPriceNet($price_net)
    {
        $this->container['price_net'] = $price_net;

        return $this;
    }

    /**
     * Gets price_gross
     *
     * @return float
     */
    public function getPriceGross()
    {
        return $this->container['price_gross'];
    }

    /**
     * Sets price_gross
     *
     * @param float $price_gross gross price of the product/part (one)
     *
     * @return $this
     */
    public function setPriceGross($price_gross)
    {
        $this->container['price_gross'] = $price_gross;

        return $this;
    }

    /**
     * Gets price_tax
     *
     * @return float
     */
    public function getPriceTax()
    {
        return $this->container['price_tax'];
    }

    /**
     * Sets price_tax
     *
     * @param float $price_tax 
     *
     * @return $this
     */
    public function setPriceTax($price_tax)
    {
        $this->container['price_tax'] = $price_tax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


