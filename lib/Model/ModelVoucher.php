<?php
/**
 * ModelVoucher
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelVoucher Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelVoucher implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model_Voucher';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create' => '\DateTime',
        'update' => '\DateTime',
        'sev_client' => 'object',
        'create_user' => '\Swagger\Client\Model\ModelSevUser',
        'voucher_date' => '\DateTime',
        'supplier' => '\Swagger\Client\Model\ModelContact',
        'supplier_name' => 'string',
        'description' => 'string',
        'document' => '\Swagger\Client\Model\ModelDocument',
        'result_disdar' => 'string',
        'document_preview' => '\Swagger\Client\Model\ModelDocument',
        'pay_date' => '\DateTime',
        'status' => 'int',
        'object' => 'object',
        'sum_net' => 'float',
        'sum_tax' => 'float',
        'sum_gross' => 'float',
        'sum_net_accounting' => 'float',
        'sum_tax_accounting' => 'float',
        'sum_gross_accounting' => 'float',
        'tax_type' => 'string',
        'credit_debit' => 'string',
        'hidden' => 'bool',
        'cost_centre' => '\Swagger\Client\Model\ModelCostCentre',
        'origin' => 'object',
        'voucher_type' => 'string',
        'recurring_intervall' => 'int',
        'recurring_start_date' => '\DateTime',
        'recurring_next_voucher' => '\DateTime',
        'recurring_last_voucher' => '\DateTime',
        'recurring_end_date' => '\DateTime',
        'enshrined' => 'bool',
        'in_source' => 'string',
        'tax_set' => '\Swagger\Client\Model\ModelTaxSet',
        'iban' => 'string',
        'accounting_special_case' => 'string',
        'payment_deadline' => '\DateTime',
        'tip' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create' => 'date-time',
        'update' => 'date-time',
        'sev_client' => null,
        'create_user' => null,
        'voucher_date' => 'date-time',
        'supplier' => null,
        'supplier_name' => null,
        'description' => null,
        'document' => null,
        'result_disdar' => null,
        'document_preview' => null,
        'pay_date' => 'date-time',
        'status' => null,
        'object' => null,
        'sum_net' => 'float',
        'sum_tax' => 'float',
        'sum_gross' => 'float',
        'sum_net_accounting' => 'float',
        'sum_tax_accounting' => 'float',
        'sum_gross_accounting' => 'float',
        'tax_type' => null,
        'credit_debit' => null,
        'hidden' => null,
        'cost_centre' => null,
        'origin' => null,
        'voucher_type' => null,
        'recurring_intervall' => null,
        'recurring_start_date' => 'date-time',
        'recurring_next_voucher' => 'date-time',
        'recurring_last_voucher' => 'date-time',
        'recurring_end_date' => 'date-time',
        'enshrined' => null,
        'in_source' => null,
        'tax_set' => null,
        'iban' => null,
        'accounting_special_case' => null,
        'payment_deadline' => 'date-time',
        'tip' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create' => 'create',
        'update' => 'update',
        'sev_client' => 'sevClient',
        'create_user' => 'createUser',
        'voucher_date' => 'voucherDate',
        'supplier' => 'supplier',
        'supplier_name' => 'supplierName',
        'description' => 'description',
        'document' => 'document',
        'result_disdar' => 'resultDisdar',
        'document_preview' => 'documentPreview',
        'pay_date' => 'payDate',
        'status' => 'status',
        'object' => 'object',
        'sum_net' => 'sumNet',
        'sum_tax' => 'sumTax',
        'sum_gross' => 'sumGross',
        'sum_net_accounting' => 'sumNetAccounting',
        'sum_tax_accounting' => 'sumTaxAccounting',
        'sum_gross_accounting' => 'sumGrossAccounting',
        'tax_type' => 'taxType',
        'credit_debit' => 'creditDebit',
        'hidden' => 'hidden',
        'cost_centre' => 'costCentre',
        'origin' => 'origin',
        'voucher_type' => 'voucherType',
        'recurring_intervall' => 'recurringIntervall',
        'recurring_start_date' => 'recurringStartDate',
        'recurring_next_voucher' => 'recurringNextVoucher',
        'recurring_last_voucher' => 'recurringLastVoucher',
        'recurring_end_date' => 'recurringEndDate',
        'enshrined' => 'enshrined',
        'in_source' => 'inSource',
        'tax_set' => 'taxSet',
        'iban' => 'iban',
        'accounting_special_case' => 'accountingSpecialCase',
        'payment_deadline' => 'paymentDeadline',
        'tip' => 'tip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create' => 'setCreate',
        'update' => 'setUpdate',
        'sev_client' => 'setSevClient',
        'create_user' => 'setCreateUser',
        'voucher_date' => 'setVoucherDate',
        'supplier' => 'setSupplier',
        'supplier_name' => 'setSupplierName',
        'description' => 'setDescription',
        'document' => 'setDocument',
        'result_disdar' => 'setResultDisdar',
        'document_preview' => 'setDocumentPreview',
        'pay_date' => 'setPayDate',
        'status' => 'setStatus',
        'object' => 'setObject',
        'sum_net' => 'setSumNet',
        'sum_tax' => 'setSumTax',
        'sum_gross' => 'setSumGross',
        'sum_net_accounting' => 'setSumNetAccounting',
        'sum_tax_accounting' => 'setSumTaxAccounting',
        'sum_gross_accounting' => 'setSumGrossAccounting',
        'tax_type' => 'setTaxType',
        'credit_debit' => 'setCreditDebit',
        'hidden' => 'setHidden',
        'cost_centre' => 'setCostCentre',
        'origin' => 'setOrigin',
        'voucher_type' => 'setVoucherType',
        'recurring_intervall' => 'setRecurringIntervall',
        'recurring_start_date' => 'setRecurringStartDate',
        'recurring_next_voucher' => 'setRecurringNextVoucher',
        'recurring_last_voucher' => 'setRecurringLastVoucher',
        'recurring_end_date' => 'setRecurringEndDate',
        'enshrined' => 'setEnshrined',
        'in_source' => 'setInSource',
        'tax_set' => 'setTaxSet',
        'iban' => 'setIban',
        'accounting_special_case' => 'setAccountingSpecialCase',
        'payment_deadline' => 'setPaymentDeadline',
        'tip' => 'setTip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create' => 'getCreate',
        'update' => 'getUpdate',
        'sev_client' => 'getSevClient',
        'create_user' => 'getCreateUser',
        'voucher_date' => 'getVoucherDate',
        'supplier' => 'getSupplier',
        'supplier_name' => 'getSupplierName',
        'description' => 'getDescription',
        'document' => 'getDocument',
        'result_disdar' => 'getResultDisdar',
        'document_preview' => 'getDocumentPreview',
        'pay_date' => 'getPayDate',
        'status' => 'getStatus',
        'object' => 'getObject',
        'sum_net' => 'getSumNet',
        'sum_tax' => 'getSumTax',
        'sum_gross' => 'getSumGross',
        'sum_net_accounting' => 'getSumNetAccounting',
        'sum_tax_accounting' => 'getSumTaxAccounting',
        'sum_gross_accounting' => 'getSumGrossAccounting',
        'tax_type' => 'getTaxType',
        'credit_debit' => 'getCreditDebit',
        'hidden' => 'getHidden',
        'cost_centre' => 'getCostCentre',
        'origin' => 'getOrigin',
        'voucher_type' => 'getVoucherType',
        'recurring_intervall' => 'getRecurringIntervall',
        'recurring_start_date' => 'getRecurringStartDate',
        'recurring_next_voucher' => 'getRecurringNextVoucher',
        'recurring_last_voucher' => 'getRecurringLastVoucher',
        'recurring_end_date' => 'getRecurringEndDate',
        'enshrined' => 'getEnshrined',
        'in_source' => 'getInSource',
        'tax_set' => 'getTaxSet',
        'iban' => 'getIban',
        'accounting_special_case' => 'getAccountingSpecialCase',
        'payment_deadline' => 'getPaymentDeadline',
        'tip' => 'getTip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create'] = isset($data['create']) ? $data['create'] : null;
        $this->container['update'] = isset($data['update']) ? $data['update'] : null;
        $this->container['sev_client'] = isset($data['sev_client']) ? $data['sev_client'] : null;
        $this->container['create_user'] = isset($data['create_user']) ? $data['create_user'] : null;
        $this->container['voucher_date'] = isset($data['voucher_date']) ? $data['voucher_date'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['supplier_name'] = isset($data['supplier_name']) ? $data['supplier_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['result_disdar'] = isset($data['result_disdar']) ? $data['result_disdar'] : null;
        $this->container['document_preview'] = isset($data['document_preview']) ? $data['document_preview'] : null;
        $this->container['pay_date'] = isset($data['pay_date']) ? $data['pay_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['object'] = isset($data['object']) ? $data['object'] : null;
        $this->container['sum_net'] = isset($data['sum_net']) ? $data['sum_net'] : 0.0;
        $this->container['sum_tax'] = isset($data['sum_tax']) ? $data['sum_tax'] : 0.0;
        $this->container['sum_gross'] = isset($data['sum_gross']) ? $data['sum_gross'] : 0.0;
        $this->container['sum_net_accounting'] = isset($data['sum_net_accounting']) ? $data['sum_net_accounting'] : 0.0;
        $this->container['sum_tax_accounting'] = isset($data['sum_tax_accounting']) ? $data['sum_tax_accounting'] : 0.0;
        $this->container['sum_gross_accounting'] = isset($data['sum_gross_accounting']) ? $data['sum_gross_accounting'] : 0.0;
        $this->container['tax_type'] = isset($data['tax_type']) ? $data['tax_type'] : null;
        $this->container['credit_debit'] = isset($data['credit_debit']) ? $data['credit_debit'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['cost_centre'] = isset($data['cost_centre']) ? $data['cost_centre'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['voucher_type'] = isset($data['voucher_type']) ? $data['voucher_type'] : null;
        $this->container['recurring_intervall'] = isset($data['recurring_intervall']) ? $data['recurring_intervall'] : null;
        $this->container['recurring_start_date'] = isset($data['recurring_start_date']) ? $data['recurring_start_date'] : null;
        $this->container['recurring_next_voucher'] = isset($data['recurring_next_voucher']) ? $data['recurring_next_voucher'] : null;
        $this->container['recurring_last_voucher'] = isset($data['recurring_last_voucher']) ? $data['recurring_last_voucher'] : null;
        $this->container['recurring_end_date'] = isset($data['recurring_end_date']) ? $data['recurring_end_date'] : null;
        $this->container['enshrined'] = isset($data['enshrined']) ? $data['enshrined'] : null;
        $this->container['in_source'] = isset($data['in_source']) ? $data['in_source'] : null;
        $this->container['tax_set'] = isset($data['tax_set']) ? $data['tax_set'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['accounting_special_case'] = isset($data['accounting_special_case']) ? $data['accounting_special_case'] : null;
        $this->container['payment_deadline'] = isset($data['payment_deadline']) ? $data['payment_deadline'] : null;
        $this->container['tip'] = isset($data['tip']) ? $data['tip'] : 0.0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create
     *
     * @return \DateTime
     */
    public function getCreate()
    {
        return $this->container['create'];
    }

    /**
     * Sets create
     *
     * @param \DateTime $create date the voucher was created
     *
     * @return $this
     */
    public function setCreate($create)
    {
        $this->container['create'] = $create;

        return $this;
    }

    /**
     * Gets update
     *
     * @return \DateTime
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param \DateTime $update date the voucher was last updated
     *
     * @return $this
     */
    public function setUpdate($update)
    {
        $this->container['update'] = $update;

        return $this;
    }

    /**
     * Gets sev_client
     *
     * @return object
     */
    public function getSevClient()
    {
        return $this->container['sev_client'];
    }

    /**
     * Sets sev_client
     *
     * @param object $sev_client sevClient is the unique id every customer has and is used in nearly all operations
     *
     * @return $this
     */
    public function setSevClient($sev_client)
    {
        $this->container['sev_client'] = $sev_client;

        return $this;
    }

    /**
     * Gets create_user
     *
     * @return \Swagger\Client\Model\ModelSevUser
     */
    public function getCreateUser()
    {
        return $this->container['create_user'];
    }

    /**
     * Sets create_user
     *
     * @param \Swagger\Client\Model\ModelSevUser $create_user sevUser who created the voucher
     *
     * @return $this
     */
    public function setCreateUser($create_user)
    {
        $this->container['create_user'] = $create_user;

        return $this;
    }

    /**
     * Gets voucher_date
     *
     * @return \DateTime
     */
    public function getVoucherDate()
    {
        return $this->container['voucher_date'];
    }

    /**
     * Sets voucher_date
     *
     * @param \DateTime $voucher_date 
     *
     * @return $this
     */
    public function setVoucherDate($voucher_date)
    {
        $this->container['voucher_date'] = $voucher_date;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return \Swagger\Client\Model\ModelContact
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param \Swagger\Client\Model\ModelContact $supplier 
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string $supplier_name 
     *
     * @return $this
     */
    public function setSupplierName($supplier_name)
    {
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description 
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \Swagger\Client\Model\ModelDocument
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \Swagger\Client\Model\ModelDocument $document 
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets result_disdar
     *
     * @return string
     */
    public function getResultDisdar()
    {
        return $this->container['result_disdar'];
    }

    /**
     * Sets result_disdar
     *
     * @param string $result_disdar 
     *
     * @return $this
     */
    public function setResultDisdar($result_disdar)
    {
        $this->container['result_disdar'] = $result_disdar;

        return $this;
    }

    /**
     * Gets document_preview
     *
     * @return \Swagger\Client\Model\ModelDocument
     */
    public function getDocumentPreview()
    {
        return $this->container['document_preview'];
    }

    /**
     * Sets document_preview
     *
     * @param \Swagger\Client\Model\ModelDocument $document_preview 
     *
     * @return $this
     */
    public function setDocumentPreview($document_preview)
    {
        $this->container['document_preview'] = $document_preview;

        return $this;
    }

    /**
     * Gets pay_date
     *
     * @return \DateTime
     */
    public function getPayDate()
    {
        return $this->container['pay_date'];
    }

    /**
     * Sets pay_date
     *
     * @param \DateTime $pay_date 
     *
     * @return $this
     */
    public function setPayDate($pay_date)
    {
        $this->container['pay_date'] = $pay_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status 
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets object
     *
     * @return object
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param object $object 
     *
     * @return $this
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets sum_net
     *
     * @return float
     */
    public function getSumNet()
    {
        return $this->container['sum_net'];
    }

    /**
     * Sets sum_net
     *
     * @param float $sum_net 
     *
     * @return $this
     */
    public function setSumNet($sum_net)
    {
        $this->container['sum_net'] = $sum_net;

        return $this;
    }

    /**
     * Gets sum_tax
     *
     * @return float
     */
    public function getSumTax()
    {
        return $this->container['sum_tax'];
    }

    /**
     * Sets sum_tax
     *
     * @param float $sum_tax 
     *
     * @return $this
     */
    public function setSumTax($sum_tax)
    {
        $this->container['sum_tax'] = $sum_tax;

        return $this;
    }

    /**
     * Gets sum_gross
     *
     * @return float
     */
    public function getSumGross()
    {
        return $this->container['sum_gross'];
    }

    /**
     * Sets sum_gross
     *
     * @param float $sum_gross 
     *
     * @return $this
     */
    public function setSumGross($sum_gross)
    {
        $this->container['sum_gross'] = $sum_gross;

        return $this;
    }

    /**
     * Gets sum_net_accounting
     *
     * @return float
     */
    public function getSumNetAccounting()
    {
        return $this->container['sum_net_accounting'];
    }

    /**
     * Sets sum_net_accounting
     *
     * @param float $sum_net_accounting 
     *
     * @return $this
     */
    public function setSumNetAccounting($sum_net_accounting)
    {
        $this->container['sum_net_accounting'] = $sum_net_accounting;

        return $this;
    }

    /**
     * Gets sum_tax_accounting
     *
     * @return float
     */
    public function getSumTaxAccounting()
    {
        return $this->container['sum_tax_accounting'];
    }

    /**
     * Sets sum_tax_accounting
     *
     * @param float $sum_tax_accounting 
     *
     * @return $this
     */
    public function setSumTaxAccounting($sum_tax_accounting)
    {
        $this->container['sum_tax_accounting'] = $sum_tax_accounting;

        return $this;
    }

    /**
     * Gets sum_gross_accounting
     *
     * @return float
     */
    public function getSumGrossAccounting()
    {
        return $this->container['sum_gross_accounting'];
    }

    /**
     * Sets sum_gross_accounting
     *
     * @param float $sum_gross_accounting 
     *
     * @return $this
     */
    public function setSumGrossAccounting($sum_gross_accounting)
    {
        $this->container['sum_gross_accounting'] = $sum_gross_accounting;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string $tax_type 
     *
     * @return $this
     */
    public function setTaxType($tax_type)
    {
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets credit_debit
     *
     * @return string
     */
    public function getCreditDebit()
    {
        return $this->container['credit_debit'];
    }

    /**
     * Sets credit_debit
     *
     * @param string $credit_debit 
     *
     * @return $this
     */
    public function setCreditDebit($credit_debit)
    {
        $this->container['credit_debit'] = $credit_debit;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden 
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets cost_centre
     *
     * @return \Swagger\Client\Model\ModelCostCentre
     */
    public function getCostCentre()
    {
        return $this->container['cost_centre'];
    }

    /**
     * Sets cost_centre
     *
     * @param \Swagger\Client\Model\ModelCostCentre $cost_centre 
     *
     * @return $this
     */
    public function setCostCentre($cost_centre)
    {
        $this->container['cost_centre'] = $cost_centre;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return object
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param object $origin 
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets voucher_type
     *
     * @return string
     */
    public function getVoucherType()
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param string $voucher_type 
     *
     * @return $this
     */
    public function setVoucherType($voucher_type)
    {
        $this->container['voucher_type'] = $voucher_type;

        return $this;
    }

    /**
     * Gets recurring_intervall
     *
     * @return int
     */
    public function getRecurringIntervall()
    {
        return $this->container['recurring_intervall'];
    }

    /**
     * Sets recurring_intervall
     *
     * @param int $recurring_intervall 
     *
     * @return $this
     */
    public function setRecurringIntervall($recurring_intervall)
    {
        $this->container['recurring_intervall'] = $recurring_intervall;

        return $this;
    }

    /**
     * Gets recurring_start_date
     *
     * @return \DateTime
     */
    public function getRecurringStartDate()
    {
        return $this->container['recurring_start_date'];
    }

    /**
     * Sets recurring_start_date
     *
     * @param \DateTime $recurring_start_date 
     *
     * @return $this
     */
    public function setRecurringStartDate($recurring_start_date)
    {
        $this->container['recurring_start_date'] = $recurring_start_date;

        return $this;
    }

    /**
     * Gets recurring_next_voucher
     *
     * @return \DateTime
     */
    public function getRecurringNextVoucher()
    {
        return $this->container['recurring_next_voucher'];
    }

    /**
     * Sets recurring_next_voucher
     *
     * @param \DateTime $recurring_next_voucher 
     *
     * @return $this
     */
    public function setRecurringNextVoucher($recurring_next_voucher)
    {
        $this->container['recurring_next_voucher'] = $recurring_next_voucher;

        return $this;
    }

    /**
     * Gets recurring_last_voucher
     *
     * @return \DateTime
     */
    public function getRecurringLastVoucher()
    {
        return $this->container['recurring_last_voucher'];
    }

    /**
     * Sets recurring_last_voucher
     *
     * @param \DateTime $recurring_last_voucher 
     *
     * @return $this
     */
    public function setRecurringLastVoucher($recurring_last_voucher)
    {
        $this->container['recurring_last_voucher'] = $recurring_last_voucher;

        return $this;
    }

    /**
     * Gets recurring_end_date
     *
     * @return \DateTime
     */
    public function getRecurringEndDate()
    {
        return $this->container['recurring_end_date'];
    }

    /**
     * Sets recurring_end_date
     *
     * @param \DateTime $recurring_end_date 
     *
     * @return $this
     */
    public function setRecurringEndDate($recurring_end_date)
    {
        $this->container['recurring_end_date'] = $recurring_end_date;

        return $this;
    }

    /**
     * Gets enshrined
     *
     * @return bool
     */
    public function getEnshrined()
    {
        return $this->container['enshrined'];
    }

    /**
     * Sets enshrined
     *
     * @param bool $enshrined 
     *
     * @return $this
     */
    public function setEnshrined($enshrined)
    {
        $this->container['enshrined'] = $enshrined;

        return $this;
    }

    /**
     * Gets in_source
     *
     * @return string
     */
    public function getInSource()
    {
        return $this->container['in_source'];
    }

    /**
     * Sets in_source
     *
     * @param string $in_source 
     *
     * @return $this
     */
    public function setInSource($in_source)
    {
        $this->container['in_source'] = $in_source;

        return $this;
    }

    /**
     * Gets tax_set
     *
     * @return \Swagger\Client\Model\ModelTaxSet
     */
    public function getTaxSet()
    {
        return $this->container['tax_set'];
    }

    /**
     * Sets tax_set
     *
     * @param \Swagger\Client\Model\ModelTaxSet $tax_set 
     *
     * @return $this
     */
    public function setTaxSet($tax_set)
    {
        $this->container['tax_set'] = $tax_set;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban 
     *
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets accounting_special_case
     *
     * @return string
     */
    public function getAccountingSpecialCase()
    {
        return $this->container['accounting_special_case'];
    }

    /**
     * Sets accounting_special_case
     *
     * @param string $accounting_special_case 
     *
     * @return $this
     */
    public function setAccountingSpecialCase($accounting_special_case)
    {
        $this->container['accounting_special_case'] = $accounting_special_case;

        return $this;
    }

    /**
     * Gets payment_deadline
     *
     * @return \DateTime
     */
    public function getPaymentDeadline()
    {
        return $this->container['payment_deadline'];
    }

    /**
     * Sets payment_deadline
     *
     * @param \DateTime $payment_deadline 
     *
     * @return $this
     */
    public function setPaymentDeadline($payment_deadline)
    {
        $this->container['payment_deadline'] = $payment_deadline;

        return $this;
    }

    /**
     * Gets tip
     *
     * @return float
     */
    public function getTip()
    {
        return $this->container['tip'];
    }

    /**
     * Sets tip
     *
     * @param float $tip 
     *
     * @return $this
     */
    public function setTip($tip)
    {
        $this->container['tip'] = $tip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


