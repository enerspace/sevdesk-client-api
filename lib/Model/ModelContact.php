<?php
/**
 * ModelContact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelContact Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelContact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model_Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\Swagger\Client\Model\ModelContactAddress',
        'create' => '\DateTime',
        'update' => '\DateTime',
        'name' => 'string',
        'status' => 'int',
        'customer_number' => 'int',
        'parent' => '\Swagger\Client\Model\ModelContact',
        'surename' => 'string',
        'familyname' => 'string',
        'titel' => 'string',
        'category' => '\Swagger\Client\Model\ModelCategory',
        'description' => 'string',
        'academic_title' => 'string',
        'gender' => 'string',
        'sev_client' => 'object',
        'name2' => 'string',
        'birthday' => '\DateTime',
        'vat_number' => 'string',
        'bank_account' => 'string',
        'bank_number' => 'string',
        'payment_method' => '\Swagger\Client\Model\ModelPaymentMethod',
        'entry_type' => '\Swagger\Client\Model\ModelEntryType',
        'default_cashback_time' => 'int',
        'default_cashback_percent' => 'int',
        'default_time_to_pay' => 'int',
        'tax_number' => 'string',
        'tax_office' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'create' => 'date-time',
        'update' => 'date-time',
        'name' => null,
        'status' => null,
        'customer_number' => null,
        'parent' => null,
        'surename' => null,
        'familyname' => null,
        'titel' => null,
        'category' => null,
        'description' => null,
        'academic_title' => null,
        'gender' => null,
        'sev_client' => null,
        'name2' => null,
        'birthday' => 'date-time',
        'vat_number' => null,
        'bank_account' => null,
        'bank_number' => null,
        'payment_method' => null,
        'entry_type' => null,
        'default_cashback_time' => null,
        'default_cashback_percent' => null,
        'default_time_to_pay' => null,
        'tax_number' => null,
        'tax_office' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'create' => 'create',
        'update' => 'update',
        'name' => 'name',
        'status' => 'status',
        'customer_number' => 'customerNumber',
        'parent' => 'parent',
        'surename' => 'surename',
        'familyname' => 'familyname',
        'titel' => 'titel',
        'category' => 'category',
        'description' => 'description',
        'academic_title' => 'academicTitle',
        'gender' => 'gender',
        'sev_client' => 'sevClient',
        'name2' => 'name2',
        'birthday' => 'birthday',
        'vat_number' => 'vatNumber',
        'bank_account' => 'bankAccount',
        'bank_number' => 'bankNumber',
        'payment_method' => 'paymentMethod',
        'entry_type' => 'entryType',
        'default_cashback_time' => 'defaultCashbackTime',
        'default_cashback_percent' => 'defaultCashbackPercent',
        'default_time_to_pay' => 'defaultTimeToPay',
        'tax_number' => 'taxNumber',
        'tax_office' => 'taxOffice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'create' => 'setCreate',
        'update' => 'setUpdate',
        'name' => 'setName',
        'status' => 'setStatus',
        'customer_number' => 'setCustomerNumber',
        'parent' => 'setParent',
        'surename' => 'setSurename',
        'familyname' => 'setFamilyname',
        'titel' => 'setTitel',
        'category' => 'setCategory',
        'description' => 'setDescription',
        'academic_title' => 'setAcademicTitle',
        'gender' => 'setGender',
        'sev_client' => 'setSevClient',
        'name2' => 'setName2',
        'birthday' => 'setBirthday',
        'vat_number' => 'setVatNumber',
        'bank_account' => 'setBankAccount',
        'bank_number' => 'setBankNumber',
        'payment_method' => 'setPaymentMethod',
        'entry_type' => 'setEntryType',
        'default_cashback_time' => 'setDefaultCashbackTime',
        'default_cashback_percent' => 'setDefaultCashbackPercent',
        'default_time_to_pay' => 'setDefaultTimeToPay',
        'tax_number' => 'setTaxNumber',
        'tax_office' => 'setTaxOffice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'create' => 'getCreate',
        'update' => 'getUpdate',
        'name' => 'getName',
        'status' => 'getStatus',
        'customer_number' => 'getCustomerNumber',
        'parent' => 'getParent',
        'surename' => 'getSurename',
        'familyname' => 'getFamilyname',
        'titel' => 'getTitel',
        'category' => 'getCategory',
        'description' => 'getDescription',
        'academic_title' => 'getAcademicTitle',
        'gender' => 'getGender',
        'sev_client' => 'getSevClient',
        'name2' => 'getName2',
        'birthday' => 'getBirthday',
        'vat_number' => 'getVatNumber',
        'bank_account' => 'getBankAccount',
        'bank_number' => 'getBankNumber',
        'payment_method' => 'getPaymentMethod',
        'entry_type' => 'getEntryType',
        'default_cashback_time' => 'getDefaultCashbackTime',
        'default_cashback_percent' => 'getDefaultCashbackPercent',
        'default_time_to_pay' => 'getDefaultTimeToPay',
        'tax_number' => 'getTaxNumber',
        'tax_office' => 'getTaxOffice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['create'] = isset($data['create']) ? $data['create'] : null;
        $this->container['update'] = isset($data['update']) ? $data['update'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['surename'] = isset($data['surename']) ? $data['surename'] : null;
        $this->container['familyname'] = isset($data['familyname']) ? $data['familyname'] : null;
        $this->container['titel'] = isset($data['titel']) ? $data['titel'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['academic_title'] = isset($data['academic_title']) ? $data['academic_title'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['sev_client'] = isset($data['sev_client']) ? $data['sev_client'] : null;
        $this->container['name2'] = isset($data['name2']) ? $data['name2'] : null;
        $this->container['birthday'] = isset($data['birthday']) ? $data['birthday'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['bank_account'] = isset($data['bank_account']) ? $data['bank_account'] : null;
        $this->container['bank_number'] = isset($data['bank_number']) ? $data['bank_number'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['entry_type'] = isset($data['entry_type']) ? $data['entry_type'] : null;
        $this->container['default_cashback_time'] = isset($data['default_cashback_time']) ? $data['default_cashback_time'] : null;
        $this->container['default_cashback_percent'] = isset($data['default_cashback_percent']) ? $data['default_cashback_percent'] : null;
        $this->container['default_time_to_pay'] = isset($data['default_time_to_pay']) ? $data['default_time_to_pay'] : null;
        $this->container['tax_number'] = isset($data['tax_number']) ? $data['tax_number'] : null;
        $this->container['tax_office'] = isset($data['tax_office']) ? $data['tax_office'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\ModelContactAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\ModelContactAddress $address the contact address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets create
     *
     * @return \DateTime
     */
    public function getCreate()
    {
        return $this->container['create'];
    }

    /**
     * Sets create
     *
     * @param \DateTime $create the creation date of the contact
     *
     * @return $this
     */
    public function setCreate($create)
    {
        $this->container['create'] = $create;

        return $this;
    }

    /**
     * Gets update
     *
     * @return \DateTime
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param \DateTime $update date, the contact was last updated
     *
     * @return $this
     */
    public function setUpdate($update)
    {
        $this->container['update'] = $update;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name of the contact
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status of the contact
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return int
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param int $customer_number customer number of the contact
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \Swagger\Client\Model\ModelContact
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \Swagger\Client\Model\ModelContact $parent 
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets surename
     *
     * @return string
     */
    public function getSurename()
    {
        return $this->container['surename'];
    }

    /**
     * Sets surename
     *
     * @param string $surename surname of the contact
     *
     * @return $this
     */
    public function setSurename($surename)
    {
        $this->container['surename'] = $surename;

        return $this;
    }

    /**
     * Gets familyname
     *
     * @return string
     */
    public function getFamilyname()
    {
        return $this->container['familyname'];
    }

    /**
     * Sets familyname
     *
     * @param string $familyname family name of the contact
     *
     * @return $this
     */
    public function setFamilyname($familyname)
    {
        $this->container['familyname'] = $familyname;

        return $this;
    }

    /**
     * Gets titel
     *
     * @return string
     */
    public function getTitel()
    {
        return $this->container['titel'];
    }

    /**
     * Sets titel
     *
     * @param string $titel title of the contact
     *
     * @return $this
     */
    public function setTitel($titel)
    {
        $this->container['titel'] = $titel;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Swagger\Client\Model\ModelCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Swagger\Client\Model\ModelCategory $category category of the contact
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description of the contact
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets academic_title
     *
     * @return string
     */
    public function getAcademicTitle()
    {
        return $this->container['academic_title'];
    }

    /**
     * Sets academic_title
     *
     * @param string $academic_title any academic title of the contact
     *
     * @return $this
     */
    public function setAcademicTitle($academic_title)
    {
        $this->container['academic_title'] = $academic_title;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender of the contact
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets sev_client
     *
     * @return object
     */
    public function getSevClient()
    {
        return $this->container['sev_client'];
    }

    /**
     * Sets sev_client
     *
     * @param object $sev_client sevClient is the unique id every customer has and is used in nearly all operations
     *
     * @return $this
     */
    public function setSevClient($sev_client)
    {
        $this->container['sev_client'] = $sev_client;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string $name2 second name of the contact
     *
     * @return $this
     */
    public function setName2($name2)
    {
        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \DateTime
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \DateTime $birthday birthday of the contact
     *
     * @return $this
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number vat number of the contact
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets bank_account
     *
     * @return string
     */
    public function getBankAccount()
    {
        return $this->container['bank_account'];
    }

    /**
     * Sets bank_account
     *
     * @param string $bank_account bank account of the contact
     *
     * @return $this
     */
    public function setBankAccount($bank_account)
    {
        $this->container['bank_account'] = $bank_account;

        return $this;
    }

    /**
     * Gets bank_number
     *
     * @return string
     */
    public function getBankNumber()
    {
        return $this->container['bank_number'];
    }

    /**
     * Sets bank_number
     *
     * @param string $bank_number bank number of the contact
     *
     * @return $this
     */
    public function setBankNumber($bank_number)
    {
        $this->container['bank_number'] = $bank_number;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \Swagger\Client\Model\ModelPaymentMethod
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \Swagger\Client\Model\ModelPaymentMethod $payment_method desired payment method of the customer
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets entry_type
     *
     * @return \Swagger\Client\Model\ModelEntryType
     */
    public function getEntryType()
    {
        return $this->container['entry_type'];
    }

    /**
     * Sets entry_type
     *
     * @param \Swagger\Client\Model\ModelEntryType $entry_type 
     *
     * @return $this
     */
    public function setEntryType($entry_type)
    {
        $this->container['entry_type'] = $entry_type;

        return $this;
    }

    /**
     * Gets default_cashback_time
     *
     * @return int
     */
    public function getDefaultCashbackTime()
    {
        return $this->container['default_cashback_time'];
    }

    /**
     * Sets default_cashback_time
     *
     * @param int $default_cashback_time default cashback time of the contact
     *
     * @return $this
     */
    public function setDefaultCashbackTime($default_cashback_time)
    {
        $this->container['default_cashback_time'] = $default_cashback_time;

        return $this;
    }

    /**
     * Gets default_cashback_percent
     *
     * @return int
     */
    public function getDefaultCashbackPercent()
    {
        return $this->container['default_cashback_percent'];
    }

    /**
     * Sets default_cashback_percent
     *
     * @param int $default_cashback_percent default cashback percentage of the contact
     *
     * @return $this
     */
    public function setDefaultCashbackPercent($default_cashback_percent)
    {
        $this->container['default_cashback_percent'] = $default_cashback_percent;

        return $this;
    }

    /**
     * Gets default_time_to_pay
     *
     * @return int
     */
    public function getDefaultTimeToPay()
    {
        return $this->container['default_time_to_pay'];
    }

    /**
     * Sets default_time_to_pay
     *
     * @param int $default_time_to_pay default time to pay of the contact
     *
     * @return $this
     */
    public function setDefaultTimeToPay($default_time_to_pay)
    {
        $this->container['default_time_to_pay'] = $default_time_to_pay;

        return $this;
    }

    /**
     * Gets tax_number
     *
     * @return string
     */
    public function getTaxNumber()
    {
        return $this->container['tax_number'];
    }

    /**
     * Sets tax_number
     *
     * @param string $tax_number tax number of the contact
     *
     * @return $this
     */
    public function setTaxNumber($tax_number)
    {
        $this->container['tax_number'] = $tax_number;

        return $this;
    }

    /**
     * Gets tax_office
     *
     * @return string
     */
    public function getTaxOffice()
    {
        return $this->container['tax_office'];
    }

    /**
     * Sets tax_office
     *
     * @param string $tax_office tax office of the contact
     *
     * @return $this
     */
    public function setTaxOffice($tax_office)
    {
        $this->container['tax_office'] = $tax_office;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


