<?php
/**
 * ModelInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelInvoice Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model_Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_number' => 'string',
        'contact' => '\Swagger\Client\Model\ModelContact',
        'create' => '\DateTime',
        'update' => '\DateTime',
        'invoice_date' => '\DateTime',
        'header' => 'string',
        'head_text' => 'string',
        'foot_text' => 'string',
        'time_to_pay' => '\DateTime',
        'discount_time' => '\DateTime',
        'discount' => 'float',
        'address_name' => 'string',
        'address_street' => 'string',
        'address_zip' => 'string',
        'address_city' => 'string',
        'address_country' => '\Swagger\Client\Model\ModelStaticCountry',
        'pay_date' => '\DateTime',
        'create_user' => '\Swagger\Client\Model\ModelSevUser',
        'sev_client' => 'object',
        'delivery_date' => '\DateTime',
        'status' => 'int',
        'small_settlement' => 'bool',
        'contact_person' => '\Swagger\Client\Model\ModelSevUser',
        'tax_rate' => 'float',
        'tax_text' => 'string',
        'dunning_level' => 'int',
        'address_parent_name' => 'string',
        'address_contact_ref' => '\Swagger\Client\Model\ModelContactAddress',
        'tax_type' => 'string',
        'payment_method' => '\Swagger\Client\Model\ModelPaymentMethod',
        'cost_centre' => '\Swagger\Client\Model\ModelCostCentre',
        'send_date' => '\DateTime',
        'origin' => 'object',
        'invoice_type' => 'string',
        'account_intervall' => 'int',
        'account_last_invoice' => '\DateTime',
        'account_next_invoice' => '\DateTime',
        'reminder_total' => 'float',
        'reminder_debit' => 'float',
        'reminder_deadline' => '\DateTime',
        'reminder_charge' => 'float',
        'address_parent_name2' => 'string',
        'address_name2' => 'string',
        'tax_set' => '\Swagger\Client\Model\ModelTaxSet',
        'address_gender' => 'string',
        'account_end_date' => '\DateTime',
        'address' => 'string',
        'currency' => 'string',
        'sum_net' => 'float',
        'sum_tax' => 'float',
        'sum_gross' => 'float',
        'sum_discounts' => 'float',
        'sum_net_foreign_currency' => 'float',
        'sum_tax_foreign_currency' => 'float',
        'sum_gross_foreign_currency' => 'float',
        'sum_discounts_foreign_currency' => 'float',
        'sum_net_accounting' => 'float',
        'sum_tax_accounting' => 'float',
        'sum_gross_accounting' => 'float',
        'entry_type' => '\Swagger\Client\Model\ModelEntryType',
        'costumer_internal_note' => 'string',
        'show_net' => 'bool',
        'enshrined' => 'bool',
        'send_type' => 'string',
        'delivery_date_until' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoice_number' => null,
        'contact' => null,
        'create' => 'date-time',
        'update' => 'date-time',
        'invoice_date' => 'date-time',
        'header' => null,
        'head_text' => null,
        'foot_text' => null,
        'time_to_pay' => 'date-time',
        'discount_time' => 'date-time',
        'discount' => 'float',
        'address_name' => null,
        'address_street' => null,
        'address_zip' => null,
        'address_city' => null,
        'address_country' => null,
        'pay_date' => 'date-time',
        'create_user' => null,
        'sev_client' => null,
        'delivery_date' => 'date-time',
        'status' => null,
        'small_settlement' => null,
        'contact_person' => null,
        'tax_rate' => 'float',
        'tax_text' => null,
        'dunning_level' => null,
        'address_parent_name' => null,
        'address_contact_ref' => null,
        'tax_type' => null,
        'payment_method' => null,
        'cost_centre' => null,
        'send_date' => 'date-time',
        'origin' => null,
        'invoice_type' => null,
        'account_intervall' => null,
        'account_last_invoice' => 'date-time',
        'account_next_invoice' => 'date-time',
        'reminder_total' => 'float',
        'reminder_debit' => 'float',
        'reminder_deadline' => 'date-time',
        'reminder_charge' => 'float',
        'address_parent_name2' => null,
        'address_name2' => null,
        'tax_set' => null,
        'address_gender' => null,
        'account_end_date' => 'date-time',
        'address' => null,
        'currency' => null,
        'sum_net' => 'float',
        'sum_tax' => 'float',
        'sum_gross' => 'float',
        'sum_discounts' => 'float',
        'sum_net_foreign_currency' => 'float',
        'sum_tax_foreign_currency' => 'float',
        'sum_gross_foreign_currency' => 'float',
        'sum_discounts_foreign_currency' => 'float',
        'sum_net_accounting' => 'float',
        'sum_tax_accounting' => 'float',
        'sum_gross_accounting' => 'float',
        'entry_type' => null,
        'costumer_internal_note' => null,
        'show_net' => null,
        'enshrined' => null,
        'send_type' => null,
        'delivery_date_until' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_number' => 'invoiceNumber',
        'contact' => 'contact',
        'create' => 'create',
        'update' => 'update',
        'invoice_date' => 'invoiceDate',
        'header' => 'header',
        'head_text' => 'headText',
        'foot_text' => 'footText',
        'time_to_pay' => 'timeToPay',
        'discount_time' => 'discountTime',
        'discount' => 'discount',
        'address_name' => 'addressName',
        'address_street' => 'addressStreet',
        'address_zip' => 'addressZip',
        'address_city' => 'addressCity',
        'address_country' => 'addressCountry',
        'pay_date' => 'payDate',
        'create_user' => 'createUser',
        'sev_client' => 'sevClient',
        'delivery_date' => 'deliveryDate',
        'status' => 'status',
        'small_settlement' => 'smallSettlement',
        'contact_person' => 'contactPerson',
        'tax_rate' => 'taxRate',
        'tax_text' => 'taxText',
        'dunning_level' => 'dunningLevel',
        'address_parent_name' => 'addressParentName',
        'address_contact_ref' => 'addressContactRef',
        'tax_type' => 'taxType',
        'payment_method' => 'paymentMethod',
        'cost_centre' => 'costCentre',
        'send_date' => 'sendDate',
        'origin' => 'origin',
        'invoice_type' => 'invoiceType',
        'account_intervall' => 'accountIntervall',
        'account_last_invoice' => 'accountLastInvoice',
        'account_next_invoice' => 'accountNextInvoice',
        'reminder_total' => 'reminderTotal',
        'reminder_debit' => 'reminderDebit',
        'reminder_deadline' => 'reminderDeadline',
        'reminder_charge' => 'reminderCharge',
        'address_parent_name2' => 'addressParentName2',
        'address_name2' => 'addressName2',
        'tax_set' => 'taxSet',
        'address_gender' => 'addressGender',
        'account_end_date' => 'accountEndDate',
        'address' => 'address',
        'currency' => 'currency',
        'sum_net' => 'sumNet',
        'sum_tax' => 'sumTax',
        'sum_gross' => 'sumGross',
        'sum_discounts' => 'sumDiscounts',
        'sum_net_foreign_currency' => 'sumNetForeignCurrency',
        'sum_tax_foreign_currency' => 'sumTaxForeignCurrency',
        'sum_gross_foreign_currency' => 'sumGrossForeignCurrency',
        'sum_discounts_foreign_currency' => 'sumDiscountsForeignCurrency',
        'sum_net_accounting' => 'sumNetAccounting',
        'sum_tax_accounting' => 'sumTaxAccounting',
        'sum_gross_accounting' => 'sumGrossAccounting',
        'entry_type' => 'entryType',
        'costumer_internal_note' => 'costumerInternalNote',
        'show_net' => 'showNet',
        'enshrined' => 'enshrined',
        'send_type' => 'sendType',
        'delivery_date_until' => 'deliveryDateUntil'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_number' => 'setInvoiceNumber',
        'contact' => 'setContact',
        'create' => 'setCreate',
        'update' => 'setUpdate',
        'invoice_date' => 'setInvoiceDate',
        'header' => 'setHeader',
        'head_text' => 'setHeadText',
        'foot_text' => 'setFootText',
        'time_to_pay' => 'setTimeToPay',
        'discount_time' => 'setDiscountTime',
        'discount' => 'setDiscount',
        'address_name' => 'setAddressName',
        'address_street' => 'setAddressStreet',
        'address_zip' => 'setAddressZip',
        'address_city' => 'setAddressCity',
        'address_country' => 'setAddressCountry',
        'pay_date' => 'setPayDate',
        'create_user' => 'setCreateUser',
        'sev_client' => 'setSevClient',
        'delivery_date' => 'setDeliveryDate',
        'status' => 'setStatus',
        'small_settlement' => 'setSmallSettlement',
        'contact_person' => 'setContactPerson',
        'tax_rate' => 'setTaxRate',
        'tax_text' => 'setTaxText',
        'dunning_level' => 'setDunningLevel',
        'address_parent_name' => 'setAddressParentName',
        'address_contact_ref' => 'setAddressContactRef',
        'tax_type' => 'setTaxType',
        'payment_method' => 'setPaymentMethod',
        'cost_centre' => 'setCostCentre',
        'send_date' => 'setSendDate',
        'origin' => 'setOrigin',
        'invoice_type' => 'setInvoiceType',
        'account_intervall' => 'setAccountIntervall',
        'account_last_invoice' => 'setAccountLastInvoice',
        'account_next_invoice' => 'setAccountNextInvoice',
        'reminder_total' => 'setReminderTotal',
        'reminder_debit' => 'setReminderDebit',
        'reminder_deadline' => 'setReminderDeadline',
        'reminder_charge' => 'setReminderCharge',
        'address_parent_name2' => 'setAddressParentName2',
        'address_name2' => 'setAddressName2',
        'tax_set' => 'setTaxSet',
        'address_gender' => 'setAddressGender',
        'account_end_date' => 'setAccountEndDate',
        'address' => 'setAddress',
        'currency' => 'setCurrency',
        'sum_net' => 'setSumNet',
        'sum_tax' => 'setSumTax',
        'sum_gross' => 'setSumGross',
        'sum_discounts' => 'setSumDiscounts',
        'sum_net_foreign_currency' => 'setSumNetForeignCurrency',
        'sum_tax_foreign_currency' => 'setSumTaxForeignCurrency',
        'sum_gross_foreign_currency' => 'setSumGrossForeignCurrency',
        'sum_discounts_foreign_currency' => 'setSumDiscountsForeignCurrency',
        'sum_net_accounting' => 'setSumNetAccounting',
        'sum_tax_accounting' => 'setSumTaxAccounting',
        'sum_gross_accounting' => 'setSumGrossAccounting',
        'entry_type' => 'setEntryType',
        'costumer_internal_note' => 'setCostumerInternalNote',
        'show_net' => 'setShowNet',
        'enshrined' => 'setEnshrined',
        'send_type' => 'setSendType',
        'delivery_date_until' => 'setDeliveryDateUntil'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_number' => 'getInvoiceNumber',
        'contact' => 'getContact',
        'create' => 'getCreate',
        'update' => 'getUpdate',
        'invoice_date' => 'getInvoiceDate',
        'header' => 'getHeader',
        'head_text' => 'getHeadText',
        'foot_text' => 'getFootText',
        'time_to_pay' => 'getTimeToPay',
        'discount_time' => 'getDiscountTime',
        'discount' => 'getDiscount',
        'address_name' => 'getAddressName',
        'address_street' => 'getAddressStreet',
        'address_zip' => 'getAddressZip',
        'address_city' => 'getAddressCity',
        'address_country' => 'getAddressCountry',
        'pay_date' => 'getPayDate',
        'create_user' => 'getCreateUser',
        'sev_client' => 'getSevClient',
        'delivery_date' => 'getDeliveryDate',
        'status' => 'getStatus',
        'small_settlement' => 'getSmallSettlement',
        'contact_person' => 'getContactPerson',
        'tax_rate' => 'getTaxRate',
        'tax_text' => 'getTaxText',
        'dunning_level' => 'getDunningLevel',
        'address_parent_name' => 'getAddressParentName',
        'address_contact_ref' => 'getAddressContactRef',
        'tax_type' => 'getTaxType',
        'payment_method' => 'getPaymentMethod',
        'cost_centre' => 'getCostCentre',
        'send_date' => 'getSendDate',
        'origin' => 'getOrigin',
        'invoice_type' => 'getInvoiceType',
        'account_intervall' => 'getAccountIntervall',
        'account_last_invoice' => 'getAccountLastInvoice',
        'account_next_invoice' => 'getAccountNextInvoice',
        'reminder_total' => 'getReminderTotal',
        'reminder_debit' => 'getReminderDebit',
        'reminder_deadline' => 'getReminderDeadline',
        'reminder_charge' => 'getReminderCharge',
        'address_parent_name2' => 'getAddressParentName2',
        'address_name2' => 'getAddressName2',
        'tax_set' => 'getTaxSet',
        'address_gender' => 'getAddressGender',
        'account_end_date' => 'getAccountEndDate',
        'address' => 'getAddress',
        'currency' => 'getCurrency',
        'sum_net' => 'getSumNet',
        'sum_tax' => 'getSumTax',
        'sum_gross' => 'getSumGross',
        'sum_discounts' => 'getSumDiscounts',
        'sum_net_foreign_currency' => 'getSumNetForeignCurrency',
        'sum_tax_foreign_currency' => 'getSumTaxForeignCurrency',
        'sum_gross_foreign_currency' => 'getSumGrossForeignCurrency',
        'sum_discounts_foreign_currency' => 'getSumDiscountsForeignCurrency',
        'sum_net_accounting' => 'getSumNetAccounting',
        'sum_tax_accounting' => 'getSumTaxAccounting',
        'sum_gross_accounting' => 'getSumGrossAccounting',
        'entry_type' => 'getEntryType',
        'costumer_internal_note' => 'getCostumerInternalNote',
        'show_net' => 'getShowNet',
        'enshrined' => 'getEnshrined',
        'send_type' => 'getSendType',
        'delivery_date_until' => 'getDeliveryDateUntil'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TAX_TEXT_UMSATZSTEUER_AUSWEISEN = 'Umsatzsteuer ausweisen';
    const TAX_TEXT_STEUERFREIE_INNERGEMEINSCHAFTLICHE_LIEFERUNG_EUROPISCHE_UNION = 'Steuerfreie innergemeinschaftliche Lieferung(Europäische Union)';
    const TAX_TEXT_STEUERSCHULDNERSCHAFT_DES_LEISTUNGSEMPFNGERS__AUSSERHALB_EU_ZB_SCHWEIZ = 'Steuerschuldnerschaft des Leistungsempfängers (Außerhalb EU, z.B. Schweiz)';
    const TAX_TYPE__DEFAULT = 'default';
    const TAX_TYPE_EU = 'eu';
    const TAX_TYPE_NOTEU = 'noteu';
    const INVOICE_TYPE_RE__INVOICE = 'RE (Invoice)';
    const INVOICE_TYPE_MA__INVOICE_REMINDER = 'MA (Invoice reminder)';
    const INVOICE_TYPE_WKR__PERIODIC_INVOICE = 'WKR (periodic invoice)';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxTextAllowableValues()
    {
        return [
            self::TAX_TEXT_UMSATZSTEUER_AUSWEISEN,
            self::TAX_TEXT_STEUERFREIE_INNERGEMEINSCHAFTLICHE_LIEFERUNG_EUROPISCHE_UNION,
            self::TAX_TEXT_STEUERSCHULDNERSCHAFT_DES_LEISTUNGSEMPFNGERS__AUSSERHALB_EU_ZB_SCHWEIZ,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxTypeAllowableValues()
    {
        return [
            self::TAX_TYPE__DEFAULT,
            self::TAX_TYPE_EU,
            self::TAX_TYPE_NOTEU,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceTypeAllowableValues()
    {
        return [
            self::INVOICE_TYPE_RE__INVOICE,
            self::INVOICE_TYPE_MA__INVOICE_REMINDER,
            self::INVOICE_TYPE_WKR__PERIODIC_INVOICE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['create'] = isset($data['create']) ? $data['create'] : null;
        $this->container['update'] = isset($data['update']) ? $data['update'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['header'] = isset($data['header']) ? $data['header'] : null;
        $this->container['head_text'] = isset($data['head_text']) ? $data['head_text'] : null;
        $this->container['foot_text'] = isset($data['foot_text']) ? $data['foot_text'] : null;
        $this->container['time_to_pay'] = isset($data['time_to_pay']) ? $data['time_to_pay'] : null;
        $this->container['discount_time'] = isset($data['discount_time']) ? $data['discount_time'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['address_name'] = isset($data['address_name']) ? $data['address_name'] : null;
        $this->container['address_street'] = isset($data['address_street']) ? $data['address_street'] : null;
        $this->container['address_zip'] = isset($data['address_zip']) ? $data['address_zip'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['pay_date'] = isset($data['pay_date']) ? $data['pay_date'] : null;
        $this->container['create_user'] = isset($data['create_user']) ? $data['create_user'] : null;
        $this->container['sev_client'] = isset($data['sev_client']) ? $data['sev_client'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['small_settlement'] = isset($data['small_settlement']) ? $data['small_settlement'] : null;
        $this->container['contact_person'] = isset($data['contact_person']) ? $data['contact_person'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['tax_text'] = isset($data['tax_text']) ? $data['tax_text'] : null;
        $this->container['dunning_level'] = isset($data['dunning_level']) ? $data['dunning_level'] : null;
        $this->container['address_parent_name'] = isset($data['address_parent_name']) ? $data['address_parent_name'] : null;
        $this->container['address_contact_ref'] = isset($data['address_contact_ref']) ? $data['address_contact_ref'] : null;
        $this->container['tax_type'] = isset($data['tax_type']) ? $data['tax_type'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['cost_centre'] = isset($data['cost_centre']) ? $data['cost_centre'] : null;
        $this->container['send_date'] = isset($data['send_date']) ? $data['send_date'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['account_intervall'] = isset($data['account_intervall']) ? $data['account_intervall'] : null;
        $this->container['account_last_invoice'] = isset($data['account_last_invoice']) ? $data['account_last_invoice'] : null;
        $this->container['account_next_invoice'] = isset($data['account_next_invoice']) ? $data['account_next_invoice'] : null;
        $this->container['reminder_total'] = isset($data['reminder_total']) ? $data['reminder_total'] : null;
        $this->container['reminder_debit'] = isset($data['reminder_debit']) ? $data['reminder_debit'] : null;
        $this->container['reminder_deadline'] = isset($data['reminder_deadline']) ? $data['reminder_deadline'] : null;
        $this->container['reminder_charge'] = isset($data['reminder_charge']) ? $data['reminder_charge'] : null;
        $this->container['address_parent_name2'] = isset($data['address_parent_name2']) ? $data['address_parent_name2'] : null;
        $this->container['address_name2'] = isset($data['address_name2']) ? $data['address_name2'] : null;
        $this->container['tax_set'] = isset($data['tax_set']) ? $data['tax_set'] : null;
        $this->container['address_gender'] = isset($data['address_gender']) ? $data['address_gender'] : null;
        $this->container['account_end_date'] = isset($data['account_end_date']) ? $data['account_end_date'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['sum_net'] = isset($data['sum_net']) ? $data['sum_net'] : null;
        $this->container['sum_tax'] = isset($data['sum_tax']) ? $data['sum_tax'] : null;
        $this->container['sum_gross'] = isset($data['sum_gross']) ? $data['sum_gross'] : null;
        $this->container['sum_discounts'] = isset($data['sum_discounts']) ? $data['sum_discounts'] : null;
        $this->container['sum_net_foreign_currency'] = isset($data['sum_net_foreign_currency']) ? $data['sum_net_foreign_currency'] : null;
        $this->container['sum_tax_foreign_currency'] = isset($data['sum_tax_foreign_currency']) ? $data['sum_tax_foreign_currency'] : null;
        $this->container['sum_gross_foreign_currency'] = isset($data['sum_gross_foreign_currency']) ? $data['sum_gross_foreign_currency'] : null;
        $this->container['sum_discounts_foreign_currency'] = isset($data['sum_discounts_foreign_currency']) ? $data['sum_discounts_foreign_currency'] : null;
        $this->container['sum_net_accounting'] = isset($data['sum_net_accounting']) ? $data['sum_net_accounting'] : null;
        $this->container['sum_tax_accounting'] = isset($data['sum_tax_accounting']) ? $data['sum_tax_accounting'] : null;
        $this->container['sum_gross_accounting'] = isset($data['sum_gross_accounting']) ? $data['sum_gross_accounting'] : null;
        $this->container['entry_type'] = isset($data['entry_type']) ? $data['entry_type'] : null;
        $this->container['costumer_internal_note'] = isset($data['costumer_internal_note']) ? $data['costumer_internal_note'] : null;
        $this->container['show_net'] = isset($data['show_net']) ? $data['show_net'] : null;
        $this->container['enshrined'] = isset($data['enshrined']) ? $data['enshrined'] : null;
        $this->container['send_type'] = isset($data['send_type']) ? $data['send_type'] : null;
        $this->container['delivery_date_until'] = isset($data['delivery_date_until']) ? $data['delivery_date_until'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['tax_rate']) && ($this->container['tax_rate'] > 100)) {
            $invalidProperties[] = "invalid value for 'tax_rate', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['tax_rate']) && ($this->container['tax_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'tax_rate', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getTaxTextAllowableValues();
        if (!is_null($this->container['tax_text']) && !in_array($this->container['tax_text'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_text', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxTypeAllowableValues();
        if (!is_null($this->container['tax_type']) && !in_array($this->container['tax_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!is_null($this->container['invoice_type']) && !in_array($this->container['invoice_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invoice_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number 
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\ModelContact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\ModelContact $contact the contact the invoice belongs to
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets create
     *
     * @return \DateTime
     */
    public function getCreate()
    {
        return $this->container['create'];
    }

    /**
     * Sets create
     *
     * @param \DateTime $create the date the invoice was created
     *
     * @return $this
     */
    public function setCreate($create)
    {
        $this->container['create'] = $create;

        return $this;
    }

    /**
     * Gets update
     *
     * @return \DateTime
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param \DateTime $update the date the invoice was last updated
     *
     * @return $this
     */
    public function setUpdate($update)
    {
        $this->container['update'] = $update;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date the date of the invoice
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets header
     *
     * @return string
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param string $header header/subject of the invoice
     *
     * @return $this
     */
    public function setHeader($header)
    {
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets head_text
     *
     * @return string
     */
    public function getHeadText()
    {
        return $this->container['head_text'];
    }

    /**
     * Sets head_text
     *
     * @param string $head_text head text of the invoice
     *
     * @return $this
     */
    public function setHeadText($head_text)
    {
        $this->container['head_text'] = $head_text;

        return $this;
    }

    /**
     * Gets foot_text
     *
     * @return string
     */
    public function getFootText()
    {
        return $this->container['foot_text'];
    }

    /**
     * Sets foot_text
     *
     * @param string $foot_text foot text of the invoice
     *
     * @return $this
     */
    public function setFootText($foot_text)
    {
        $this->container['foot_text'] = $foot_text;

        return $this;
    }

    /**
     * Gets time_to_pay
     *
     * @return \DateTime
     */
    public function getTimeToPay()
    {
        return $this->container['time_to_pay'];
    }

    /**
     * Sets time_to_pay
     *
     * @param \DateTime $time_to_pay time left for paying the invoice, use format dd.MM.yyyy or number for number of days left
     *
     * @return $this
     */
    public function setTimeToPay($time_to_pay)
    {
        $this->container['time_to_pay'] = $time_to_pay;

        return $this;
    }

    /**
     * Gets discount_time
     *
     * @return \DateTime
     */
    public function getDiscountTime()
    {
        return $this->container['discount_time'];
    }

    /**
     * Sets discount_time
     *
     * @param \DateTime $discount_time 
     *
     * @return $this
     */
    public function setDiscountTime($discount_time)
    {
        $this->container['discount_time'] = $discount_time;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float $discount the discount value in '%'
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets address_name
     *
     * @return string
     */
    public function getAddressName()
    {
        return $this->container['address_name'];
    }

    /**
     * Sets address_name
     *
     * @param string $address_name the name in the address, equals the contacts name
     *
     * @return $this
     */
    public function setAddressName($address_name)
    {
        $this->container['address_name'] = $address_name;

        return $this;
    }

    /**
     * Gets address_street
     *
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['address_street'];
    }

    /**
     * Sets address_street
     *
     * @param string $address_street the street in the address, equals the contacts street
     *
     * @return $this
     */
    public function setAddressStreet($address_street)
    {
        $this->container['address_street'] = $address_street;

        return $this;
    }

    /**
     * Gets address_zip
     *
     * @return string
     */
    public function getAddressZip()
    {
        return $this->container['address_zip'];
    }

    /**
     * Sets address_zip
     *
     * @param string $address_zip the zip-code in the address, equals the contacts zip
     *
     * @return $this
     */
    public function setAddressZip($address_zip)
    {
        $this->container['address_zip'] = $address_zip;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city the city in the address, equals the contacts city
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return \Swagger\Client\Model\ModelStaticCountry
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param \Swagger\Client\Model\ModelStaticCountry $address_country the country in the address, equals the contacts country
     *
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets pay_date
     *
     * @return \DateTime
     */
    public function getPayDate()
    {
        return $this->container['pay_date'];
    }

    /**
     * Sets pay_date
     *
     * @param \DateTime $pay_date time left for paying the invoice, use format DD.MM.YYYY or number for number of days left
     *
     * @return $this
     */
    public function setPayDate($pay_date)
    {
        $this->container['pay_date'] = $pay_date;

        return $this;
    }

    /**
     * Gets create_user
     *
     * @return \Swagger\Client\Model\ModelSevUser
     */
    public function getCreateUser()
    {
        return $this->container['create_user'];
    }

    /**
     * Sets create_user
     *
     * @param \Swagger\Client\Model\ModelSevUser $create_user SevUser who created the invoice
     *
     * @return $this
     */
    public function setCreateUser($create_user)
    {
        $this->container['create_user'] = $create_user;

        return $this;
    }

    /**
     * Gets sev_client
     *
     * @return object
     */
    public function getSevClient()
    {
        return $this->container['sev_client'];
    }

    /**
     * Sets sev_client
     *
     * @param object $sev_client sevClient is the unique id every customer has and is used in nearly all operations
     *
     * @return $this
     */
    public function setSevClient($sev_client)
    {
        $this->container['sev_client'] = $sev_client;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime $delivery_date delivery date of the goods from the invoice, please use dd.MM.yyyy
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status of the invoice
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets small_settlement
     *
     * @return bool
     */
    public function getSmallSettlement()
    {
        return $this->container['small_settlement'];
    }

    /**
     * Sets small_settlement
     *
     * @param bool $small_settlement 
     *
     * @return $this
     */
    public function setSmallSettlement($small_settlement)
    {
        $this->container['small_settlement'] = $small_settlement;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return \Swagger\Client\Model\ModelSevUser
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param \Swagger\Client\Model\ModelSevUser $contact_person SevUser who created the invoice and therefore is the contact person
     *
     * @return $this
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float $tax_rate tax rate used when adding a value added tax regulation
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {

        if (!is_null($tax_rate) && ($tax_rate > 100)) {
            throw new \InvalidArgumentException('invalid value for $tax_rate when calling ModelInvoice., must be smaller than or equal to 100.');
        }
        if (!is_null($tax_rate) && ($tax_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $tax_rate when calling ModelInvoice., must be bigger than or equal to 0.');
        }

        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets tax_text
     *
     * @return string
     */
    public function getTaxText()
    {
        return $this->container['tax_text'];
    }

    /**
     * Sets tax_text
     *
     * @param string $tax_text additional text when adding a value added tax regulation
     *
     * @return $this
     */
    public function setTaxText($tax_text)
    {
        $allowedValues = $this->getTaxTextAllowableValues();
        if (!is_null($tax_text) && !in_array($tax_text, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_text', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_text'] = $tax_text;

        return $this;
    }

    /**
     * Gets dunning_level
     *
     * @return int
     */
    public function getDunningLevel()
    {
        return $this->container['dunning_level'];
    }

    /**
     * Sets dunning_level
     *
     * @param int $dunning_level dunning level of the invoice
     *
     * @return $this
     */
    public function setDunningLevel($dunning_level)
    {
        $this->container['dunning_level'] = $dunning_level;

        return $this;
    }

    /**
     * Gets address_parent_name
     *
     * @return string
     */
    public function getAddressParentName()
    {
        return $this->container['address_parent_name'];
    }

    /**
     * Sets address_parent_name
     *
     * @param string $address_parent_name name of the contacts address
     *
     * @return $this
     */
    public function setAddressParentName($address_parent_name)
    {
        $this->container['address_parent_name'] = $address_parent_name;

        return $this;
    }

    /**
     * Gets address_contact_ref
     *
     * @return \Swagger\Client\Model\ModelContactAddress
     */
    public function getAddressContactRef()
    {
        return $this->container['address_contact_ref'];
    }

    /**
     * Sets address_contact_ref
     *
     * @param \Swagger\Client\Model\ModelContactAddress $address_contact_ref a reference to the contacts address
     *
     * @return $this
     */
    public function setAddressContactRef($address_contact_ref)
    {
        $this->container['address_contact_ref'] = $address_contact_ref;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string $tax_type 
     *
     * @return $this
     */
    public function setTaxType($tax_type)
    {
        $allowedValues = $this->getTaxTypeAllowableValues();
        if (!is_null($tax_type) && !in_array($tax_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \Swagger\Client\Model\ModelPaymentMethod
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \Swagger\Client\Model\ModelPaymentMethod $payment_method 
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets cost_centre
     *
     * @return \Swagger\Client\Model\ModelCostCentre
     */
    public function getCostCentre()
    {
        return $this->container['cost_centre'];
    }

    /**
     * Sets cost_centre
     *
     * @param \Swagger\Client\Model\ModelCostCentre $cost_centre 
     *
     * @return $this
     */
    public function setCostCentre($cost_centre)
    {
        $this->container['cost_centre'] = $cost_centre;

        return $this;
    }

    /**
     * Gets send_date
     *
     * @return \DateTime
     */
    public function getSendDate()
    {
        return $this->container['send_date'];
    }

    /**
     * Sets send_date
     *
     * @param \DateTime $send_date 
     *
     * @return $this
     */
    public function setSendDate($send_date)
    {
        $this->container['send_date'] = $send_date;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return object
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param object $origin 
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param string $invoice_type type of the invoice
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!is_null($invoice_type) && !in_array($invoice_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invoice_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets account_intervall
     *
     * @return int
     */
    public function getAccountIntervall()
    {
        return $this->container['account_intervall'];
    }

    /**
     * Sets account_intervall
     *
     * @param int $account_intervall 
     *
     * @return $this
     */
    public function setAccountIntervall($account_intervall)
    {
        $this->container['account_intervall'] = $account_intervall;

        return $this;
    }

    /**
     * Gets account_last_invoice
     *
     * @return \DateTime
     */
    public function getAccountLastInvoice()
    {
        return $this->container['account_last_invoice'];
    }

    /**
     * Sets account_last_invoice
     *
     * @param \DateTime $account_last_invoice 
     *
     * @return $this
     */
    public function setAccountLastInvoice($account_last_invoice)
    {
        $this->container['account_last_invoice'] = $account_last_invoice;

        return $this;
    }

    /**
     * Gets account_next_invoice
     *
     * @return \DateTime
     */
    public function getAccountNextInvoice()
    {
        return $this->container['account_next_invoice'];
    }

    /**
     * Sets account_next_invoice
     *
     * @param \DateTime $account_next_invoice 
     *
     * @return $this
     */
    public function setAccountNextInvoice($account_next_invoice)
    {
        $this->container['account_next_invoice'] = $account_next_invoice;

        return $this;
    }

    /**
     * Gets reminder_total
     *
     * @return float
     */
    public function getReminderTotal()
    {
        return $this->container['reminder_total'];
    }

    /**
     * Sets reminder_total
     *
     * @param float $reminder_total 
     *
     * @return $this
     */
    public function setReminderTotal($reminder_total)
    {
        $this->container['reminder_total'] = $reminder_total;

        return $this;
    }

    /**
     * Gets reminder_debit
     *
     * @return float
     */
    public function getReminderDebit()
    {
        return $this->container['reminder_debit'];
    }

    /**
     * Sets reminder_debit
     *
     * @param float $reminder_debit 
     *
     * @return $this
     */
    public function setReminderDebit($reminder_debit)
    {
        $this->container['reminder_debit'] = $reminder_debit;

        return $this;
    }

    /**
     * Gets reminder_deadline
     *
     * @return \DateTime
     */
    public function getReminderDeadline()
    {
        return $this->container['reminder_deadline'];
    }

    /**
     * Sets reminder_deadline
     *
     * @param \DateTime $reminder_deadline 
     *
     * @return $this
     */
    public function setReminderDeadline($reminder_deadline)
    {
        $this->container['reminder_deadline'] = $reminder_deadline;

        return $this;
    }

    /**
     * Gets reminder_charge
     *
     * @return float
     */
    public function getReminderCharge()
    {
        return $this->container['reminder_charge'];
    }

    /**
     * Sets reminder_charge
     *
     * @param float $reminder_charge 
     *
     * @return $this
     */
    public function setReminderCharge($reminder_charge)
    {
        $this->container['reminder_charge'] = $reminder_charge;

        return $this;
    }

    /**
     * Gets address_parent_name2
     *
     * @return string
     */
    public function getAddressParentName2()
    {
        return $this->container['address_parent_name2'];
    }

    /**
     * Sets address_parent_name2
     *
     * @param string $address_parent_name2 
     *
     * @return $this
     */
    public function setAddressParentName2($address_parent_name2)
    {
        $this->container['address_parent_name2'] = $address_parent_name2;

        return $this;
    }

    /**
     * Gets address_name2
     *
     * @return string
     */
    public function getAddressName2()
    {
        return $this->container['address_name2'];
    }

    /**
     * Sets address_name2
     *
     * @param string $address_name2 
     *
     * @return $this
     */
    public function setAddressName2($address_name2)
    {
        $this->container['address_name2'] = $address_name2;

        return $this;
    }

    /**
     * Gets tax_set
     *
     * @return \Swagger\Client\Model\ModelTaxSet
     */
    public function getTaxSet()
    {
        return $this->container['tax_set'];
    }

    /**
     * Sets tax_set
     *
     * @param \Swagger\Client\Model\ModelTaxSet $tax_set 
     *
     * @return $this
     */
    public function setTaxSet($tax_set)
    {
        $this->container['tax_set'] = $tax_set;

        return $this;
    }

    /**
     * Gets address_gender
     *
     * @return string
     */
    public function getAddressGender()
    {
        return $this->container['address_gender'];
    }

    /**
     * Sets address_gender
     *
     * @param string $address_gender 
     *
     * @return $this
     */
    public function setAddressGender($address_gender)
    {
        $this->container['address_gender'] = $address_gender;

        return $this;
    }

    /**
     * Gets account_end_date
     *
     * @return \DateTime
     */
    public function getAccountEndDate()
    {
        return $this->container['account_end_date'];
    }

    /**
     * Sets account_end_date
     *
     * @param \DateTime $account_end_date 
     *
     * @return $this
     */
    public function setAccountEndDate($account_end_date)
    {
        $this->container['account_end_date'] = $account_end_date;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address 
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency 
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets sum_net
     *
     * @return float
     */
    public function getSumNet()
    {
        return $this->container['sum_net'];
    }

    /**
     * Sets sum_net
     *
     * @param float $sum_net 
     *
     * @return $this
     */
    public function setSumNet($sum_net)
    {
        $this->container['sum_net'] = $sum_net;

        return $this;
    }

    /**
     * Gets sum_tax
     *
     * @return float
     */
    public function getSumTax()
    {
        return $this->container['sum_tax'];
    }

    /**
     * Sets sum_tax
     *
     * @param float $sum_tax 
     *
     * @return $this
     */
    public function setSumTax($sum_tax)
    {
        $this->container['sum_tax'] = $sum_tax;

        return $this;
    }

    /**
     * Gets sum_gross
     *
     * @return float
     */
    public function getSumGross()
    {
        return $this->container['sum_gross'];
    }

    /**
     * Sets sum_gross
     *
     * @param float $sum_gross 
     *
     * @return $this
     */
    public function setSumGross($sum_gross)
    {
        $this->container['sum_gross'] = $sum_gross;

        return $this;
    }

    /**
     * Gets sum_discounts
     *
     * @return float
     */
    public function getSumDiscounts()
    {
        return $this->container['sum_discounts'];
    }

    /**
     * Sets sum_discounts
     *
     * @param float $sum_discounts 
     *
     * @return $this
     */
    public function setSumDiscounts($sum_discounts)
    {
        $this->container['sum_discounts'] = $sum_discounts;

        return $this;
    }

    /**
     * Gets sum_net_foreign_currency
     *
     * @return float
     */
    public function getSumNetForeignCurrency()
    {
        return $this->container['sum_net_foreign_currency'];
    }

    /**
     * Sets sum_net_foreign_currency
     *
     * @param float $sum_net_foreign_currency 
     *
     * @return $this
     */
    public function setSumNetForeignCurrency($sum_net_foreign_currency)
    {
        $this->container['sum_net_foreign_currency'] = $sum_net_foreign_currency;

        return $this;
    }

    /**
     * Gets sum_tax_foreign_currency
     *
     * @return float
     */
    public function getSumTaxForeignCurrency()
    {
        return $this->container['sum_tax_foreign_currency'];
    }

    /**
     * Sets sum_tax_foreign_currency
     *
     * @param float $sum_tax_foreign_currency 
     *
     * @return $this
     */
    public function setSumTaxForeignCurrency($sum_tax_foreign_currency)
    {
        $this->container['sum_tax_foreign_currency'] = $sum_tax_foreign_currency;

        return $this;
    }

    /**
     * Gets sum_gross_foreign_currency
     *
     * @return float
     */
    public function getSumGrossForeignCurrency()
    {
        return $this->container['sum_gross_foreign_currency'];
    }

    /**
     * Sets sum_gross_foreign_currency
     *
     * @param float $sum_gross_foreign_currency 
     *
     * @return $this
     */
    public function setSumGrossForeignCurrency($sum_gross_foreign_currency)
    {
        $this->container['sum_gross_foreign_currency'] = $sum_gross_foreign_currency;

        return $this;
    }

    /**
     * Gets sum_discounts_foreign_currency
     *
     * @return float
     */
    public function getSumDiscountsForeignCurrency()
    {
        return $this->container['sum_discounts_foreign_currency'];
    }

    /**
     * Sets sum_discounts_foreign_currency
     *
     * @param float $sum_discounts_foreign_currency 
     *
     * @return $this
     */
    public function setSumDiscountsForeignCurrency($sum_discounts_foreign_currency)
    {
        $this->container['sum_discounts_foreign_currency'] = $sum_discounts_foreign_currency;

        return $this;
    }

    /**
     * Gets sum_net_accounting
     *
     * @return float
     */
    public function getSumNetAccounting()
    {
        return $this->container['sum_net_accounting'];
    }

    /**
     * Sets sum_net_accounting
     *
     * @param float $sum_net_accounting 
     *
     * @return $this
     */
    public function setSumNetAccounting($sum_net_accounting)
    {
        $this->container['sum_net_accounting'] = $sum_net_accounting;

        return $this;
    }

    /**
     * Gets sum_tax_accounting
     *
     * @return float
     */
    public function getSumTaxAccounting()
    {
        return $this->container['sum_tax_accounting'];
    }

    /**
     * Sets sum_tax_accounting
     *
     * @param float $sum_tax_accounting 
     *
     * @return $this
     */
    public function setSumTaxAccounting($sum_tax_accounting)
    {
        $this->container['sum_tax_accounting'] = $sum_tax_accounting;

        return $this;
    }

    /**
     * Gets sum_gross_accounting
     *
     * @return float
     */
    public function getSumGrossAccounting()
    {
        return $this->container['sum_gross_accounting'];
    }

    /**
     * Sets sum_gross_accounting
     *
     * @param float $sum_gross_accounting 
     *
     * @return $this
     */
    public function setSumGrossAccounting($sum_gross_accounting)
    {
        $this->container['sum_gross_accounting'] = $sum_gross_accounting;

        return $this;
    }

    /**
     * Gets entry_type
     *
     * @return \Swagger\Client\Model\ModelEntryType
     */
    public function getEntryType()
    {
        return $this->container['entry_type'];
    }

    /**
     * Sets entry_type
     *
     * @param \Swagger\Client\Model\ModelEntryType $entry_type 
     *
     * @return $this
     */
    public function setEntryType($entry_type)
    {
        $this->container['entry_type'] = $entry_type;

        return $this;
    }

    /**
     * Gets costumer_internal_note
     *
     * @return string
     */
    public function getCostumerInternalNote()
    {
        return $this->container['costumer_internal_note'];
    }

    /**
     * Sets costumer_internal_note
     *
     * @param string $costumer_internal_note 
     *
     * @return $this
     */
    public function setCostumerInternalNote($costumer_internal_note)
    {
        $this->container['costumer_internal_note'] = $costumer_internal_note;

        return $this;
    }

    /**
     * Gets show_net
     *
     * @return bool
     */
    public function getShowNet()
    {
        return $this->container['show_net'];
    }

    /**
     * Sets show_net
     *
     * @param bool $show_net 
     *
     * @return $this
     */
    public function setShowNet($show_net)
    {
        $this->container['show_net'] = $show_net;

        return $this;
    }

    /**
     * Gets enshrined
     *
     * @return bool
     */
    public function getEnshrined()
    {
        return $this->container['enshrined'];
    }

    /**
     * Sets enshrined
     *
     * @param bool $enshrined 
     *
     * @return $this
     */
    public function setEnshrined($enshrined)
    {
        $this->container['enshrined'] = $enshrined;

        return $this;
    }

    /**
     * Gets send_type
     *
     * @return string
     */
    public function getSendType()
    {
        return $this->container['send_type'];
    }

    /**
     * Sets send_type
     *
     * @param string $send_type 
     *
     * @return $this
     */
    public function setSendType($send_type)
    {
        $this->container['send_type'] = $send_type;

        return $this;
    }

    /**
     * Gets delivery_date_until
     *
     * @return \DateTime
     */
    public function getDeliveryDateUntil()
    {
        return $this->container['delivery_date_until'];
    }

    /**
     * Sets delivery_date_until
     *
     * @param \DateTime $delivery_date_until 
     *
     * @return $this
     */
    public function setDeliveryDateUntil($delivery_date_until)
    {
        $this->container['delivery_date_until'] = $delivery_date_until;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


