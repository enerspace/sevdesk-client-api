<?php
/**
 * ModelLetter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelLetter Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelLetter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model_Letter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create' => '\DateTime',
        'update' => '\DateTime',
        'letter_number' => 'string',
        'contact' => '\Swagger\Client\Model\ModelContact',
        'letter_date' => '\DateTime',
        'header' => 'string',
        'address_name' => 'string',
        'address_name2' => 'string',
        'address_street' => 'string',
        'address_zip' => 'string',
        'address_city' => 'string',
        'address_country' => '\Swagger\Client\Model\ModelStaticCountry',
        'sev_client' => 'object',
        'status' => 'int',
        'contact_person' => '\Swagger\Client\Model\ModelSevUser',
        'address_parent_name' => 'string',
        'address_contact_ref' => '\Swagger\Client\Model\ModelContactAddress',
        'text' => 'string',
        'send_date' => '\DateTime',
        'address_parent_name2' => 'string',
        'address_gender' => 'string',
        'address' => 'string',
        'send_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create' => 'date-time',
        'update' => 'date-time',
        'letter_number' => null,
        'contact' => null,
        'letter_date' => 'date-time',
        'header' => null,
        'address_name' => null,
        'address_name2' => null,
        'address_street' => null,
        'address_zip' => null,
        'address_city' => null,
        'address_country' => null,
        'sev_client' => null,
        'status' => null,
        'contact_person' => null,
        'address_parent_name' => null,
        'address_contact_ref' => null,
        'text' => null,
        'send_date' => 'date-time',
        'address_parent_name2' => null,
        'address_gender' => null,
        'address' => null,
        'send_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create' => 'create',
        'update' => 'update',
        'letter_number' => 'letterNumber',
        'contact' => 'contact',
        'letter_date' => 'letterDate',
        'header' => 'header',
        'address_name' => 'addressName',
        'address_name2' => 'addressName2',
        'address_street' => 'addressStreet',
        'address_zip' => 'addressZip',
        'address_city' => 'addressCity',
        'address_country' => 'addressCountry',
        'sev_client' => 'sevClient',
        'status' => 'status',
        'contact_person' => 'contactPerson',
        'address_parent_name' => 'addressParentName',
        'address_contact_ref' => 'addressContactRef',
        'text' => 'text',
        'send_date' => 'sendDate',
        'address_parent_name2' => 'addressParentName2',
        'address_gender' => 'addressGender',
        'address' => 'address',
        'send_type' => 'sendType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create' => 'setCreate',
        'update' => 'setUpdate',
        'letter_number' => 'setLetterNumber',
        'contact' => 'setContact',
        'letter_date' => 'setLetterDate',
        'header' => 'setHeader',
        'address_name' => 'setAddressName',
        'address_name2' => 'setAddressName2',
        'address_street' => 'setAddressStreet',
        'address_zip' => 'setAddressZip',
        'address_city' => 'setAddressCity',
        'address_country' => 'setAddressCountry',
        'sev_client' => 'setSevClient',
        'status' => 'setStatus',
        'contact_person' => 'setContactPerson',
        'address_parent_name' => 'setAddressParentName',
        'address_contact_ref' => 'setAddressContactRef',
        'text' => 'setText',
        'send_date' => 'setSendDate',
        'address_parent_name2' => 'setAddressParentName2',
        'address_gender' => 'setAddressGender',
        'address' => 'setAddress',
        'send_type' => 'setSendType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create' => 'getCreate',
        'update' => 'getUpdate',
        'letter_number' => 'getLetterNumber',
        'contact' => 'getContact',
        'letter_date' => 'getLetterDate',
        'header' => 'getHeader',
        'address_name' => 'getAddressName',
        'address_name2' => 'getAddressName2',
        'address_street' => 'getAddressStreet',
        'address_zip' => 'getAddressZip',
        'address_city' => 'getAddressCity',
        'address_country' => 'getAddressCountry',
        'sev_client' => 'getSevClient',
        'status' => 'getStatus',
        'contact_person' => 'getContactPerson',
        'address_parent_name' => 'getAddressParentName',
        'address_contact_ref' => 'getAddressContactRef',
        'text' => 'getText',
        'send_date' => 'getSendDate',
        'address_parent_name2' => 'getAddressParentName2',
        'address_gender' => 'getAddressGender',
        'address' => 'getAddress',
        'send_type' => 'getSendType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create'] = isset($data['create']) ? $data['create'] : null;
        $this->container['update'] = isset($data['update']) ? $data['update'] : null;
        $this->container['letter_number'] = isset($data['letter_number']) ? $data['letter_number'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['letter_date'] = isset($data['letter_date']) ? $data['letter_date'] : null;
        $this->container['header'] = isset($data['header']) ? $data['header'] : null;
        $this->container['address_name'] = isset($data['address_name']) ? $data['address_name'] : null;
        $this->container['address_name2'] = isset($data['address_name2']) ? $data['address_name2'] : null;
        $this->container['address_street'] = isset($data['address_street']) ? $data['address_street'] : null;
        $this->container['address_zip'] = isset($data['address_zip']) ? $data['address_zip'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['sev_client'] = isset($data['sev_client']) ? $data['sev_client'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['contact_person'] = isset($data['contact_person']) ? $data['contact_person'] : null;
        $this->container['address_parent_name'] = isset($data['address_parent_name']) ? $data['address_parent_name'] : null;
        $this->container['address_contact_ref'] = isset($data['address_contact_ref']) ? $data['address_contact_ref'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['send_date'] = isset($data['send_date']) ? $data['send_date'] : null;
        $this->container['address_parent_name2'] = isset($data['address_parent_name2']) ? $data['address_parent_name2'] : null;
        $this->container['address_gender'] = isset($data['address_gender']) ? $data['address_gender'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['send_type'] = isset($data['send_type']) ? $data['send_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create
     *
     * @return \DateTime
     */
    public function getCreate()
    {
        return $this->container['create'];
    }

    /**
     * Sets create
     *
     * @param \DateTime $create creation date of the letter
     *
     * @return $this
     */
    public function setCreate($create)
    {
        $this->container['create'] = $create;

        return $this;
    }

    /**
     * Gets update
     *
     * @return \DateTime
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param \DateTime $update date the letter was last updated
     *
     * @return $this
     */
    public function setUpdate($update)
    {
        $this->container['update'] = $update;

        return $this;
    }

    /**
     * Gets letter_number
     *
     * @return string
     */
    public function getLetterNumber()
    {
        return $this->container['letter_number'];
    }

    /**
     * Sets letter_number
     *
     * @param string $letter_number 
     *
     * @return $this
     */
    public function setLetterNumber($letter_number)
    {
        $this->container['letter_number'] = $letter_number;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\ModelContact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\ModelContact $contact 
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets letter_date
     *
     * @return \DateTime
     */
    public function getLetterDate()
    {
        return $this->container['letter_date'];
    }

    /**
     * Sets letter_date
     *
     * @param \DateTime $letter_date 
     *
     * @return $this
     */
    public function setLetterDate($letter_date)
    {
        $this->container['letter_date'] = $letter_date;

        return $this;
    }

    /**
     * Gets header
     *
     * @return string
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param string $header 
     *
     * @return $this
     */
    public function setHeader($header)
    {
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets address_name
     *
     * @return string
     */
    public function getAddressName()
    {
        return $this->container['address_name'];
    }

    /**
     * Sets address_name
     *
     * @param string $address_name 
     *
     * @return $this
     */
    public function setAddressName($address_name)
    {
        $this->container['address_name'] = $address_name;

        return $this;
    }

    /**
     * Gets address_name2
     *
     * @return string
     */
    public function getAddressName2()
    {
        return $this->container['address_name2'];
    }

    /**
     * Sets address_name2
     *
     * @param string $address_name2 
     *
     * @return $this
     */
    public function setAddressName2($address_name2)
    {
        $this->container['address_name2'] = $address_name2;

        return $this;
    }

    /**
     * Gets address_street
     *
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['address_street'];
    }

    /**
     * Sets address_street
     *
     * @param string $address_street 
     *
     * @return $this
     */
    public function setAddressStreet($address_street)
    {
        $this->container['address_street'] = $address_street;

        return $this;
    }

    /**
     * Gets address_zip
     *
     * @return string
     */
    public function getAddressZip()
    {
        return $this->container['address_zip'];
    }

    /**
     * Sets address_zip
     *
     * @param string $address_zip 
     *
     * @return $this
     */
    public function setAddressZip($address_zip)
    {
        $this->container['address_zip'] = $address_zip;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city 
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return \Swagger\Client\Model\ModelStaticCountry
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param \Swagger\Client\Model\ModelStaticCountry $address_country 
     *
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets sev_client
     *
     * @return object
     */
    public function getSevClient()
    {
        return $this->container['sev_client'];
    }

    /**
     * Sets sev_client
     *
     * @param object $sev_client sevClient is the unique id every customer has and is used in nearly all operations
     *
     * @return $this
     */
    public function setSevClient($sev_client)
    {
        $this->container['sev_client'] = $sev_client;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status 
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return \Swagger\Client\Model\ModelSevUser
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param \Swagger\Client\Model\ModelSevUser $contact_person 
     *
     * @return $this
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets address_parent_name
     *
     * @return string
     */
    public function getAddressParentName()
    {
        return $this->container['address_parent_name'];
    }

    /**
     * Sets address_parent_name
     *
     * @param string $address_parent_name 
     *
     * @return $this
     */
    public function setAddressParentName($address_parent_name)
    {
        $this->container['address_parent_name'] = $address_parent_name;

        return $this;
    }

    /**
     * Gets address_contact_ref
     *
     * @return \Swagger\Client\Model\ModelContactAddress
     */
    public function getAddressContactRef()
    {
        return $this->container['address_contact_ref'];
    }

    /**
     * Sets address_contact_ref
     *
     * @param \Swagger\Client\Model\ModelContactAddress $address_contact_ref reference to Model_ContactAddress
     *
     * @return $this
     */
    public function setAddressContactRef($address_contact_ref)
    {
        $this->container['address_contact_ref'] = $address_contact_ref;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text for the letter
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets send_date
     *
     * @return \DateTime
     */
    public function getSendDate()
    {
        return $this->container['send_date'];
    }

    /**
     * Sets send_date
     *
     * @param \DateTime $send_date 
     *
     * @return $this
     */
    public function setSendDate($send_date)
    {
        $this->container['send_date'] = $send_date;

        return $this;
    }

    /**
     * Gets address_parent_name2
     *
     * @return string
     */
    public function getAddressParentName2()
    {
        return $this->container['address_parent_name2'];
    }

    /**
     * Sets address_parent_name2
     *
     * @param string $address_parent_name2 
     *
     * @return $this
     */
    public function setAddressParentName2($address_parent_name2)
    {
        $this->container['address_parent_name2'] = $address_parent_name2;

        return $this;
    }

    /**
     * Gets address_gender
     *
     * @return string
     */
    public function getAddressGender()
    {
        return $this->container['address_gender'];
    }

    /**
     * Sets address_gender
     *
     * @param string $address_gender 
     *
     * @return $this
     */
    public function setAddressGender($address_gender)
    {
        $this->container['address_gender'] = $address_gender;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address 
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets send_type
     *
     * @return string
     */
    public function getSendType()
    {
        return $this->container['send_type'];
    }

    /**
     * Sets send_type
     *
     * @param string $send_type 
     *
     * @return $this
     */
    public function setSendType($send_type)
    {
        $this->container['send_type'] = $send_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


