<?php
/**
 * ModelPart
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelPart Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelPart implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model_Part';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create' => '\DateTime',
        'update' => '\DateTime',
        'name' => 'string',
        'part_number' => 'string',
        'text' => 'string',
        'category' => '\Swagger\Client\Model\ModelCategory',
        'stock' => 'float',
        'unity' => '\Swagger\Client\Model\ModelUnity',
        'price_partner' => 'float',
        'price_customer' => 'float',
        'price' => 'float',
        'second_unity' => '\Swagger\Client\Model\ModelUnity',
        'second_unity_factor' => 'float',
        'sev_client' => 'object',
        'price_purchase' => 'float',
        'tax_rate' => 'float',
        'image' => 'string',
        'status' => 'int',
        'characteristics' => 'string',
        'origin' => '\Swagger\Client\Model\ModelPart',
        'characteristics_string' => 'string',
        'internal_comment' => 'string',
        'entry_type' => '\Swagger\Client\Model\ModelEntryType',
        'accounting_type' => '\Swagger\Client\Model\ModelAccountingType',
        'price_net' => 'float',
        'price_gross' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create' => 'date-time',
        'update' => 'date-time',
        'name' => null,
        'part_number' => null,
        'text' => null,
        'category' => null,
        'stock' => 'float',
        'unity' => null,
        'price_partner' => 'float',
        'price_customer' => 'float',
        'price' => 'float',
        'second_unity' => null,
        'second_unity_factor' => 'float',
        'sev_client' => null,
        'price_purchase' => 'float',
        'tax_rate' => 'float',
        'image' => null,
        'status' => null,
        'characteristics' => null,
        'origin' => null,
        'characteristics_string' => null,
        'internal_comment' => null,
        'entry_type' => null,
        'accounting_type' => null,
        'price_net' => 'float',
        'price_gross' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create' => 'create',
        'update' => 'update',
        'name' => 'name',
        'part_number' => 'partNumber',
        'text' => 'text',
        'category' => 'category',
        'stock' => 'stock',
        'unity' => 'unity',
        'price_partner' => 'pricePartner',
        'price_customer' => 'priceCustomer',
        'price' => 'price',
        'second_unity' => 'secondUnity',
        'second_unity_factor' => 'secondUnityFactor',
        'sev_client' => 'sevClient',
        'price_purchase' => 'pricePurchase',
        'tax_rate' => 'taxRate',
        'image' => 'image',
        'status' => 'status',
        'characteristics' => 'characteristics',
        'origin' => 'origin',
        'characteristics_string' => 'characteristicsString',
        'internal_comment' => 'internalComment',
        'entry_type' => 'entryType',
        'accounting_type' => 'accountingType',
        'price_net' => 'priceNet',
        'price_gross' => 'priceGross'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create' => 'setCreate',
        'update' => 'setUpdate',
        'name' => 'setName',
        'part_number' => 'setPartNumber',
        'text' => 'setText',
        'category' => 'setCategory',
        'stock' => 'setStock',
        'unity' => 'setUnity',
        'price_partner' => 'setPricePartner',
        'price_customer' => 'setPriceCustomer',
        'price' => 'setPrice',
        'second_unity' => 'setSecondUnity',
        'second_unity_factor' => 'setSecondUnityFactor',
        'sev_client' => 'setSevClient',
        'price_purchase' => 'setPricePurchase',
        'tax_rate' => 'setTaxRate',
        'image' => 'setImage',
        'status' => 'setStatus',
        'characteristics' => 'setCharacteristics',
        'origin' => 'setOrigin',
        'characteristics_string' => 'setCharacteristicsString',
        'internal_comment' => 'setInternalComment',
        'entry_type' => 'setEntryType',
        'accounting_type' => 'setAccountingType',
        'price_net' => 'setPriceNet',
        'price_gross' => 'setPriceGross'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create' => 'getCreate',
        'update' => 'getUpdate',
        'name' => 'getName',
        'part_number' => 'getPartNumber',
        'text' => 'getText',
        'category' => 'getCategory',
        'stock' => 'getStock',
        'unity' => 'getUnity',
        'price_partner' => 'getPricePartner',
        'price_customer' => 'getPriceCustomer',
        'price' => 'getPrice',
        'second_unity' => 'getSecondUnity',
        'second_unity_factor' => 'getSecondUnityFactor',
        'sev_client' => 'getSevClient',
        'price_purchase' => 'getPricePurchase',
        'tax_rate' => 'getTaxRate',
        'image' => 'getImage',
        'status' => 'getStatus',
        'characteristics' => 'getCharacteristics',
        'origin' => 'getOrigin',
        'characteristics_string' => 'getCharacteristicsString',
        'internal_comment' => 'getInternalComment',
        'entry_type' => 'getEntryType',
        'accounting_type' => 'getAccountingType',
        'price_net' => 'getPriceNet',
        'price_gross' => 'getPriceGross'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create'] = isset($data['create']) ? $data['create'] : null;
        $this->container['update'] = isset($data['update']) ? $data['update'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['part_number'] = isset($data['part_number']) ? $data['part_number'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['stock'] = isset($data['stock']) ? $data['stock'] : null;
        $this->container['unity'] = isset($data['unity']) ? $data['unity'] : null;
        $this->container['price_partner'] = isset($data['price_partner']) ? $data['price_partner'] : null;
        $this->container['price_customer'] = isset($data['price_customer']) ? $data['price_customer'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['second_unity'] = isset($data['second_unity']) ? $data['second_unity'] : null;
        $this->container['second_unity_factor'] = isset($data['second_unity_factor']) ? $data['second_unity_factor'] : null;
        $this->container['sev_client'] = isset($data['sev_client']) ? $data['sev_client'] : null;
        $this->container['price_purchase'] = isset($data['price_purchase']) ? $data['price_purchase'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['characteristics'] = isset($data['characteristics']) ? $data['characteristics'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['characteristics_string'] = isset($data['characteristics_string']) ? $data['characteristics_string'] : null;
        $this->container['internal_comment'] = isset($data['internal_comment']) ? $data['internal_comment'] : null;
        $this->container['entry_type'] = isset($data['entry_type']) ? $data['entry_type'] : null;
        $this->container['accounting_type'] = isset($data['accounting_type']) ? $data['accounting_type'] : null;
        $this->container['price_net'] = isset($data['price_net']) ? $data['price_net'] : null;
        $this->container['price_gross'] = isset($data['price_gross']) ? $data['price_gross'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create
     *
     * @return \DateTime
     */
    public function getCreate()
    {
        return $this->container['create'];
    }

    /**
     * Sets create
     *
     * @param \DateTime $create date the part was created
     *
     * @return $this
     */
    public function setCreate($create)
    {
        $this->container['create'] = $create;

        return $this;
    }

    /**
     * Gets update
     *
     * @return \DateTime
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param \DateTime $update date the part was last updated
     *
     * @return $this
     */
    public function setUpdate($update)
    {
        $this->container['update'] = $update;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name of the part
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return string
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param string $part_number 
     *
     * @return $this
     */
    public function setPartNumber($part_number)
    {
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text 
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Swagger\Client\Model\ModelCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Swagger\Client\Model\ModelCategory $category 
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return float
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param float $stock 
     *
     * @return $this
     */
    public function setStock($stock)
    {
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets unity
     *
     * @return \Swagger\Client\Model\ModelUnity
     */
    public function getUnity()
    {
        return $this->container['unity'];
    }

    /**
     * Sets unity
     *
     * @param \Swagger\Client\Model\ModelUnity $unity unity of the part, references Unity.php
     *
     * @return $this
     */
    public function setUnity($unity)
    {
        $this->container['unity'] = $unity;

        return $this;
    }

    /**
     * Gets price_partner
     *
     * @return float
     */
    public function getPricePartner()
    {
        return $this->container['price_partner'];
    }

    /**
     * Sets price_partner
     *
     * @param float $price_partner price for a partner. Can be added via the options in the inventory where the part is displayed
     *
     * @return $this
     */
    public function setPricePartner($price_partner)
    {
        $this->container['price_partner'] = $price_partner;

        return $this;
    }

    /**
     * Gets price_customer
     *
     * @return float
     */
    public function getPriceCustomer()
    {
        return $this->container['price_customer'];
    }

    /**
     * Sets price_customer
     *
     * @param float $price_customer price for a customer. Can be added via the options in the inventory where the part is displayed
     *
     * @return $this
     */
    public function setPriceCustomer($price_customer)
    {
        $this->container['price_customer'] = $price_customer;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price of the part
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets second_unity
     *
     * @return \Swagger\Client\Model\ModelUnity
     */
    public function getSecondUnity()
    {
        return $this->container['second_unity'];
    }

    /**
     * Sets second_unity
     *
     * @param \Swagger\Client\Model\ModelUnity $second_unity a second unity which can be added to the part
     *
     * @return $this
     */
    public function setSecondUnity($second_unity)
    {
        $this->container['second_unity'] = $second_unity;

        return $this;
    }

    /**
     * Gets second_unity_factor
     *
     * @return float
     */
    public function getSecondUnityFactor()
    {
        return $this->container['second_unity_factor'];
    }

    /**
     * Sets second_unity_factor
     *
     * @param float $second_unity_factor factor for the second unity resulting in a new sumNet for the secondUnity
     *
     * @return $this
     */
    public function setSecondUnityFactor($second_unity_factor)
    {
        $this->container['second_unity_factor'] = $second_unity_factor;

        return $this;
    }

    /**
     * Gets sev_client
     *
     * @return object
     */
    public function getSevClient()
    {
        return $this->container['sev_client'];
    }

    /**
     * Sets sev_client
     *
     * @param object $sev_client sevClient is the unique id every customer has and is used in nearly all operations
     *
     * @return $this
     */
    public function setSevClient($sev_client)
    {
        $this->container['sev_client'] = $sev_client;

        return $this;
    }

    /**
     * Gets price_purchase
     *
     * @return float
     */
    public function getPricePurchase()
    {
        return $this->container['price_purchase'];
    }

    /**
     * Sets price_purchase
     *
     * @param float $price_purchase 
     *
     * @return $this
     */
    public function setPricePurchase($price_purchase)
    {
        $this->container['price_purchase'] = $price_purchase;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float $tax_rate 
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image 
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status 
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets characteristics
     *
     * @return string
     */
    public function getCharacteristics()
    {
        return $this->container['characteristics'];
    }

    /**
     * Sets characteristics
     *
     * @param string $characteristics characteristics of the part
     *
     * @return $this
     */
    public function setCharacteristics($characteristics)
    {
        $this->container['characteristics'] = $characteristics;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return \Swagger\Client\Model\ModelPart
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \Swagger\Client\Model\ModelPart $origin 
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets characteristics_string
     *
     * @return string
     */
    public function getCharacteristicsString()
    {
        return $this->container['characteristics_string'];
    }

    /**
     * Sets characteristics_string
     *
     * @param string $characteristics_string 
     *
     * @return $this
     */
    public function setCharacteristicsString($characteristics_string)
    {
        $this->container['characteristics_string'] = $characteristics_string;

        return $this;
    }

    /**
     * Gets internal_comment
     *
     * @return string
     */
    public function getInternalComment()
    {
        return $this->container['internal_comment'];
    }

    /**
     * Sets internal_comment
     *
     * @param string $internal_comment 
     *
     * @return $this
     */
    public function setInternalComment($internal_comment)
    {
        $this->container['internal_comment'] = $internal_comment;

        return $this;
    }

    /**
     * Gets entry_type
     *
     * @return \Swagger\Client\Model\ModelEntryType
     */
    public function getEntryType()
    {
        return $this->container['entry_type'];
    }

    /**
     * Sets entry_type
     *
     * @param \Swagger\Client\Model\ModelEntryType $entry_type 
     *
     * @return $this
     */
    public function setEntryType($entry_type)
    {
        $this->container['entry_type'] = $entry_type;

        return $this;
    }

    /**
     * Gets accounting_type
     *
     * @return \Swagger\Client\Model\ModelAccountingType
     */
    public function getAccountingType()
    {
        return $this->container['accounting_type'];
    }

    /**
     * Sets accounting_type
     *
     * @param \Swagger\Client\Model\ModelAccountingType $accounting_type 
     *
     * @return $this
     */
    public function setAccountingType($accounting_type)
    {
        $this->container['accounting_type'] = $accounting_type;

        return $this;
    }

    /**
     * Gets price_net
     *
     * @return float
     */
    public function getPriceNet()
    {
        return $this->container['price_net'];
    }

    /**
     * Sets price_net
     *
     * @param float $price_net 
     *
     * @return $this
     */
    public function setPriceNet($price_net)
    {
        $this->container['price_net'] = $price_net;

        return $this;
    }

    /**
     * Gets price_gross
     *
     * @return float
     */
    public function getPriceGross()
    {
        return $this->container['price_gross'];
    }

    /**
     * Sets price_gross
     *
     * @param float $price_gross 
     *
     * @return $this
     */
    public function setPriceGross($price_gross)
    {
        $this->container['price_gross'] = $price_gross;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


