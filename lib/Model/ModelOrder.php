<?php
/**
 * ModelOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sevDesk
 *
 * # Getting started  The sevDesk API v1 uses a token authentication.    You need to click on the authorization button (lock symbol) and enter your api-key there.    The token can be found on [https://my.sevdesk.de](https://my.sevdesk.de).    settings-->user-->specific user    # General information    The sevDesk api uses **models** to represent the different categories like **contacts** and **invoices**.    Every time you request such a model from the api, it will return the whole model schema including the unique **model id** and all the other objects and parameters that are included in the model.    Have a look at it in the developer console of your desired browser, especially if you are looking for specific parameters like the model id.    # URL    The basic URL contains four elements. **BaseURL** + **Controller** + **Version** + **Model**: [https://my.sevdesk.de/api/v1/Contact/](https://my.sevdesk.de/api/v1/Contact/)    # Basic Operations    Access a list of models: [https://my.sevdesk.de/api/v1/{Model}/](https://my.sevdesk.de/api/v1/{Model}/)    Access a specific model: [https://my.sevdesk.de/api/v1/{Model}/{id}](https://my.sevdesk.de/api/v1/{Model}/{id})    The **id** of a specific model can usually be found in the **developer console** of your browser or when opening a specific model, in the **url**.    Call a model function: [https://my.sevdesk.de/api/v1/{Model}/{id}/{Function}](https://my.sevdesk.de/api/v1/{Model}/{id}/{Function})    Each operation can be used with different HTTP methods:  * GET - read data  * POST - create data  * PUT - update existing data  * DELETE - delete data    # Useful Parameters    For each request, there are some specific parameters.    **GET Query Parameters**  * **limit** - limits the number of entries returned  * **offset** - set the index where the returned entries should start  * **embed** - embed can be used to get some additional information about a model. For example you can get the addresses of a contact with **embed=addresses**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses`    * If there is a need to get more information about the country in the addresses, embed can be extended by **addresses.country**    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=addresses,addresses.country`    * Some models also contain other models. By default these models are only filled with an id and objectName. If you want to get more information about the nested model you can use embed too.    `[GET]https://my.sevdesk.de/api/v1/Contact/?embed=parent`    * Every model also has specified 'query parameters'. These can be used to filter the results. E.g. all Contacts with a 'Company' in their name    `[GET]https://my.sevdesk.de/api/v1/Contact/?name=Company`    * **countAll** If countAll is set to 1 the total number of entries will be returned additionally  * **orderBy** Is an array that can be filled with objects containing the the properties field and arrangement    `json: orderBy = [{field:'parent' ,arrangement:'desc'},{field:'name' ,arrangement:'asc'}];`    `url: ?orderBy[0][field]=parent&orderBy[0][arrangement]=desc&orderBy[1][field]=name&orderBy[1][arrangement]=asc`
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModelOrder Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModelOrder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model_Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create' => '\DateTime',
        'update' => '\DateTime',
        'oder_number' => 'string',
        'contact' => '\Swagger\Client\Model\ModelContact',
        'order_date' => '\DateTime',
        'status' => 'int',
        'header' => 'string',
        'head_text' => 'string',
        'foot_text' => 'string',
        'address_name' => 'string',
        'address_street' => 'string',
        'address_zip' => 'string',
        'address_city' => 'string',
        'address_country' => '\Swagger\Client\Model\ModelStaticCountry',
        'create_user' => '\Swagger\Client\Model\ModelSevUser',
        'sev_client' => 'object',
        'delivery_terms' => 'string',
        'payment_terms' => 'string',
        'origin' => 'object',
        'version' => 'int',
        'small_settlement' => 'bool',
        'contact_person' => '\Swagger\Client\Model\ModelSevUser',
        'tax_rate' => 'float',
        'tax_set' => '\Swagger\Client\Model\ModelTaxSet',
        'tax_text' => 'string',
        'address_parent_name' => 'string',
        'address_contact_ref' => '\Swagger\Client\Model\ModelContactAddress',
        'tax_type' => 'string',
        'order_type' => 'string',
        'send_date' => '\DateTime',
        'address_parent_name2' => 'string',
        'address_name2' => 'string',
        'address_gender' => 'string',
        'address' => '\Swagger\Client\Model\ModelContactAddress',
        'currency' => 'string',
        'sum_net' => 'float',
        'sum_tax' => 'float',
        'sum_gross' => 'float',
        'sum_discounts' => 'float',
        'sum_net_foreign_currency' => 'float',
        'sum_tax_foreign_currency' => 'float',
        'sum_gross_foreign_currency' => 'float',
        'sum_discounts_foreign_currency' => 'float',
        'weight' => 'float',
        'entry_type' => '\Swagger\Client\Model\ModelEntryType',
        'costumer_internal_note' => 'string',
        'show_net' => 'bool',
        'send_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create' => 'date-time',
        'update' => 'date-time',
        'oder_number' => null,
        'contact' => null,
        'order_date' => 'date-time',
        'status' => null,
        'header' => null,
        'head_text' => null,
        'foot_text' => null,
        'address_name' => null,
        'address_street' => null,
        'address_zip' => null,
        'address_city' => null,
        'address_country' => null,
        'create_user' => null,
        'sev_client' => null,
        'delivery_terms' => null,
        'payment_terms' => null,
        'origin' => null,
        'version' => null,
        'small_settlement' => null,
        'contact_person' => null,
        'tax_rate' => 'float',
        'tax_set' => null,
        'tax_text' => null,
        'address_parent_name' => null,
        'address_contact_ref' => null,
        'tax_type' => null,
        'order_type' => null,
        'send_date' => 'date-time',
        'address_parent_name2' => null,
        'address_name2' => null,
        'address_gender' => null,
        'address' => null,
        'currency' => null,
        'sum_net' => 'float',
        'sum_tax' => 'float',
        'sum_gross' => 'float',
        'sum_discounts' => 'float',
        'sum_net_foreign_currency' => 'float',
        'sum_tax_foreign_currency' => 'float',
        'sum_gross_foreign_currency' => 'float',
        'sum_discounts_foreign_currency' => 'float',
        'weight' => 'float',
        'entry_type' => null,
        'costumer_internal_note' => null,
        'show_net' => null,
        'send_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create' => 'create',
        'update' => 'update',
        'oder_number' => 'oderNumber',
        'contact' => 'contact',
        'order_date' => 'orderDate',
        'status' => 'status',
        'header' => 'header',
        'head_text' => 'headText',
        'foot_text' => 'footText',
        'address_name' => 'addressName',
        'address_street' => 'addressStreet',
        'address_zip' => 'addressZip',
        'address_city' => 'addressCity',
        'address_country' => 'addressCountry',
        'create_user' => 'createUser',
        'sev_client' => 'sevClient',
        'delivery_terms' => 'deliveryTerms',
        'payment_terms' => 'paymentTerms',
        'origin' => 'origin',
        'version' => 'version',
        'small_settlement' => 'smallSettlement',
        'contact_person' => 'contactPerson',
        'tax_rate' => 'taxRate',
        'tax_set' => 'taxSet',
        'tax_text' => 'taxText',
        'address_parent_name' => 'addressParentName',
        'address_contact_ref' => 'addressContactRef',
        'tax_type' => 'taxType',
        'order_type' => 'orderType',
        'send_date' => 'sendDate',
        'address_parent_name2' => 'addressParentName2',
        'address_name2' => 'addressName2',
        'address_gender' => 'addressGender',
        'address' => 'address',
        'currency' => 'currency',
        'sum_net' => 'sumNet',
        'sum_tax' => 'sumTax',
        'sum_gross' => 'sumGross',
        'sum_discounts' => 'sumDiscounts',
        'sum_net_foreign_currency' => 'sumNetForeignCurrency',
        'sum_tax_foreign_currency' => 'sumTaxForeignCurrency',
        'sum_gross_foreign_currency' => 'sumGrossForeignCurrency',
        'sum_discounts_foreign_currency' => 'sumDiscountsForeignCurrency',
        'weight' => 'weight',
        'entry_type' => 'entryType',
        'costumer_internal_note' => 'costumerInternalNote',
        'show_net' => 'showNet',
        'send_type' => 'sendType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create' => 'setCreate',
        'update' => 'setUpdate',
        'oder_number' => 'setOderNumber',
        'contact' => 'setContact',
        'order_date' => 'setOrderDate',
        'status' => 'setStatus',
        'header' => 'setHeader',
        'head_text' => 'setHeadText',
        'foot_text' => 'setFootText',
        'address_name' => 'setAddressName',
        'address_street' => 'setAddressStreet',
        'address_zip' => 'setAddressZip',
        'address_city' => 'setAddressCity',
        'address_country' => 'setAddressCountry',
        'create_user' => 'setCreateUser',
        'sev_client' => 'setSevClient',
        'delivery_terms' => 'setDeliveryTerms',
        'payment_terms' => 'setPaymentTerms',
        'origin' => 'setOrigin',
        'version' => 'setVersion',
        'small_settlement' => 'setSmallSettlement',
        'contact_person' => 'setContactPerson',
        'tax_rate' => 'setTaxRate',
        'tax_set' => 'setTaxSet',
        'tax_text' => 'setTaxText',
        'address_parent_name' => 'setAddressParentName',
        'address_contact_ref' => 'setAddressContactRef',
        'tax_type' => 'setTaxType',
        'order_type' => 'setOrderType',
        'send_date' => 'setSendDate',
        'address_parent_name2' => 'setAddressParentName2',
        'address_name2' => 'setAddressName2',
        'address_gender' => 'setAddressGender',
        'address' => 'setAddress',
        'currency' => 'setCurrency',
        'sum_net' => 'setSumNet',
        'sum_tax' => 'setSumTax',
        'sum_gross' => 'setSumGross',
        'sum_discounts' => 'setSumDiscounts',
        'sum_net_foreign_currency' => 'setSumNetForeignCurrency',
        'sum_tax_foreign_currency' => 'setSumTaxForeignCurrency',
        'sum_gross_foreign_currency' => 'setSumGrossForeignCurrency',
        'sum_discounts_foreign_currency' => 'setSumDiscountsForeignCurrency',
        'weight' => 'setWeight',
        'entry_type' => 'setEntryType',
        'costumer_internal_note' => 'setCostumerInternalNote',
        'show_net' => 'setShowNet',
        'send_type' => 'setSendType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create' => 'getCreate',
        'update' => 'getUpdate',
        'oder_number' => 'getOderNumber',
        'contact' => 'getContact',
        'order_date' => 'getOrderDate',
        'status' => 'getStatus',
        'header' => 'getHeader',
        'head_text' => 'getHeadText',
        'foot_text' => 'getFootText',
        'address_name' => 'getAddressName',
        'address_street' => 'getAddressStreet',
        'address_zip' => 'getAddressZip',
        'address_city' => 'getAddressCity',
        'address_country' => 'getAddressCountry',
        'create_user' => 'getCreateUser',
        'sev_client' => 'getSevClient',
        'delivery_terms' => 'getDeliveryTerms',
        'payment_terms' => 'getPaymentTerms',
        'origin' => 'getOrigin',
        'version' => 'getVersion',
        'small_settlement' => 'getSmallSettlement',
        'contact_person' => 'getContactPerson',
        'tax_rate' => 'getTaxRate',
        'tax_set' => 'getTaxSet',
        'tax_text' => 'getTaxText',
        'address_parent_name' => 'getAddressParentName',
        'address_contact_ref' => 'getAddressContactRef',
        'tax_type' => 'getTaxType',
        'order_type' => 'getOrderType',
        'send_date' => 'getSendDate',
        'address_parent_name2' => 'getAddressParentName2',
        'address_name2' => 'getAddressName2',
        'address_gender' => 'getAddressGender',
        'address' => 'getAddress',
        'currency' => 'getCurrency',
        'sum_net' => 'getSumNet',
        'sum_tax' => 'getSumTax',
        'sum_gross' => 'getSumGross',
        'sum_discounts' => 'getSumDiscounts',
        'sum_net_foreign_currency' => 'getSumNetForeignCurrency',
        'sum_tax_foreign_currency' => 'getSumTaxForeignCurrency',
        'sum_gross_foreign_currency' => 'getSumGrossForeignCurrency',
        'sum_discounts_foreign_currency' => 'getSumDiscountsForeignCurrency',
        'weight' => 'getWeight',
        'entry_type' => 'getEntryType',
        'costumer_internal_note' => 'getCostumerInternalNote',
        'show_net' => 'getShowNet',
        'send_type' => 'getSendType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create'] = isset($data['create']) ? $data['create'] : null;
        $this->container['update'] = isset($data['update']) ? $data['update'] : null;
        $this->container['oder_number'] = isset($data['oder_number']) ? $data['oder_number'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['header'] = isset($data['header']) ? $data['header'] : null;
        $this->container['head_text'] = isset($data['head_text']) ? $data['head_text'] : null;
        $this->container['foot_text'] = isset($data['foot_text']) ? $data['foot_text'] : null;
        $this->container['address_name'] = isset($data['address_name']) ? $data['address_name'] : null;
        $this->container['address_street'] = isset($data['address_street']) ? $data['address_street'] : null;
        $this->container['address_zip'] = isset($data['address_zip']) ? $data['address_zip'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['create_user'] = isset($data['create_user']) ? $data['create_user'] : null;
        $this->container['sev_client'] = isset($data['sev_client']) ? $data['sev_client'] : null;
        $this->container['delivery_terms'] = isset($data['delivery_terms']) ? $data['delivery_terms'] : null;
        $this->container['payment_terms'] = isset($data['payment_terms']) ? $data['payment_terms'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['small_settlement'] = isset($data['small_settlement']) ? $data['small_settlement'] : null;
        $this->container['contact_person'] = isset($data['contact_person']) ? $data['contact_person'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['tax_set'] = isset($data['tax_set']) ? $data['tax_set'] : null;
        $this->container['tax_text'] = isset($data['tax_text']) ? $data['tax_text'] : null;
        $this->container['address_parent_name'] = isset($data['address_parent_name']) ? $data['address_parent_name'] : null;
        $this->container['address_contact_ref'] = isset($data['address_contact_ref']) ? $data['address_contact_ref'] : null;
        $this->container['tax_type'] = isset($data['tax_type']) ? $data['tax_type'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['send_date'] = isset($data['send_date']) ? $data['send_date'] : null;
        $this->container['address_parent_name2'] = isset($data['address_parent_name2']) ? $data['address_parent_name2'] : null;
        $this->container['address_name2'] = isset($data['address_name2']) ? $data['address_name2'] : null;
        $this->container['address_gender'] = isset($data['address_gender']) ? $data['address_gender'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['sum_net'] = isset($data['sum_net']) ? $data['sum_net'] : null;
        $this->container['sum_tax'] = isset($data['sum_tax']) ? $data['sum_tax'] : null;
        $this->container['sum_gross'] = isset($data['sum_gross']) ? $data['sum_gross'] : null;
        $this->container['sum_discounts'] = isset($data['sum_discounts']) ? $data['sum_discounts'] : null;
        $this->container['sum_net_foreign_currency'] = isset($data['sum_net_foreign_currency']) ? $data['sum_net_foreign_currency'] : null;
        $this->container['sum_tax_foreign_currency'] = isset($data['sum_tax_foreign_currency']) ? $data['sum_tax_foreign_currency'] : null;
        $this->container['sum_gross_foreign_currency'] = isset($data['sum_gross_foreign_currency']) ? $data['sum_gross_foreign_currency'] : null;
        $this->container['sum_discounts_foreign_currency'] = isset($data['sum_discounts_foreign_currency']) ? $data['sum_discounts_foreign_currency'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['entry_type'] = isset($data['entry_type']) ? $data['entry_type'] : null;
        $this->container['costumer_internal_note'] = isset($data['costumer_internal_note']) ? $data['costumer_internal_note'] : null;
        $this->container['show_net'] = isset($data['show_net']) ? $data['show_net'] : null;
        $this->container['send_type'] = isset($data['send_type']) ? $data['send_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create
     *
     * @return \DateTime
     */
    public function getCreate()
    {
        return $this->container['create'];
    }

    /**
     * Sets create
     *
     * @param \DateTime $create date the order was created
     *
     * @return $this
     */
    public function setCreate($create)
    {
        $this->container['create'] = $create;

        return $this;
    }

    /**
     * Gets update
     *
     * @return \DateTime
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param \DateTime $update date the order was last updated
     *
     * @return $this
     */
    public function setUpdate($update)
    {
        $this->container['update'] = $update;

        return $this;
    }

    /**
     * Gets oder_number
     *
     * @return string
     */
    public function getOderNumber()
    {
        return $this->container['oder_number'];
    }

    /**
     * Sets oder_number
     *
     * @param string $oder_number 
     *
     * @return $this
     */
    public function setOderNumber($oder_number)
    {
        $this->container['oder_number'] = $oder_number;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\ModelContact
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\ModelContact $contact the Model_Contact which is linked to the order
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date 
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status 
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets header
     *
     * @return string
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param string $header 
     *
     * @return $this
     */
    public function setHeader($header)
    {
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets head_text
     *
     * @return string
     */
    public function getHeadText()
    {
        return $this->container['head_text'];
    }

    /**
     * Sets head_text
     *
     * @param string $head_text 
     *
     * @return $this
     */
    public function setHeadText($head_text)
    {
        $this->container['head_text'] = $head_text;

        return $this;
    }

    /**
     * Gets foot_text
     *
     * @return string
     */
    public function getFootText()
    {
        return $this->container['foot_text'];
    }

    /**
     * Sets foot_text
     *
     * @param string $foot_text 
     *
     * @return $this
     */
    public function setFootText($foot_text)
    {
        $this->container['foot_text'] = $foot_text;

        return $this;
    }

    /**
     * Gets address_name
     *
     * @return string
     */
    public function getAddressName()
    {
        return $this->container['address_name'];
    }

    /**
     * Sets address_name
     *
     * @param string $address_name 
     *
     * @return $this
     */
    public function setAddressName($address_name)
    {
        $this->container['address_name'] = $address_name;

        return $this;
    }

    /**
     * Gets address_street
     *
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['address_street'];
    }

    /**
     * Sets address_street
     *
     * @param string $address_street 
     *
     * @return $this
     */
    public function setAddressStreet($address_street)
    {
        $this->container['address_street'] = $address_street;

        return $this;
    }

    /**
     * Gets address_zip
     *
     * @return string
     */
    public function getAddressZip()
    {
        return $this->container['address_zip'];
    }

    /**
     * Sets address_zip
     *
     * @param string $address_zip 
     *
     * @return $this
     */
    public function setAddressZip($address_zip)
    {
        $this->container['address_zip'] = $address_zip;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city 
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return \Swagger\Client\Model\ModelStaticCountry
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param \Swagger\Client\Model\ModelStaticCountry $address_country 
     *
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets create_user
     *
     * @return \Swagger\Client\Model\ModelSevUser
     */
    public function getCreateUser()
    {
        return $this->container['create_user'];
    }

    /**
     * Sets create_user
     *
     * @param \Swagger\Client\Model\ModelSevUser $create_user 
     *
     * @return $this
     */
    public function setCreateUser($create_user)
    {
        $this->container['create_user'] = $create_user;

        return $this;
    }

    /**
     * Gets sev_client
     *
     * @return object
     */
    public function getSevClient()
    {
        return $this->container['sev_client'];
    }

    /**
     * Sets sev_client
     *
     * @param object $sev_client sevClient is the unique id every customer has and is used in nearly all operations
     *
     * @return $this
     */
    public function setSevClient($sev_client)
    {
        $this->container['sev_client'] = $sev_client;

        return $this;
    }

    /**
     * Gets delivery_terms
     *
     * @return string
     */
    public function getDeliveryTerms()
    {
        return $this->container['delivery_terms'];
    }

    /**
     * Sets delivery_terms
     *
     * @param string $delivery_terms 
     *
     * @return $this
     */
    public function setDeliveryTerms($delivery_terms)
    {
        $this->container['delivery_terms'] = $delivery_terms;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return string
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param string $payment_terms 
     *
     * @return $this
     */
    public function setPaymentTerms($payment_terms)
    {
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return object
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param object $origin 
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version 
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets small_settlement
     *
     * @return bool
     */
    public function getSmallSettlement()
    {
        return $this->container['small_settlement'];
    }

    /**
     * Sets small_settlement
     *
     * @param bool $small_settlement 
     *
     * @return $this
     */
    public function setSmallSettlement($small_settlement)
    {
        $this->container['small_settlement'] = $small_settlement;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return \Swagger\Client\Model\ModelSevUser
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param \Swagger\Client\Model\ModelSevUser $contact_person contact person for the order which is a SevUser
     *
     * @return $this
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float $tax_rate 
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets tax_set
     *
     * @return \Swagger\Client\Model\ModelTaxSet
     */
    public function getTaxSet()
    {
        return $this->container['tax_set'];
    }

    /**
     * Sets tax_set
     *
     * @param \Swagger\Client\Model\ModelTaxSet $tax_set 
     *
     * @return $this
     */
    public function setTaxSet($tax_set)
    {
        $this->container['tax_set'] = $tax_set;

        return $this;
    }

    /**
     * Gets tax_text
     *
     * @return string
     */
    public function getTaxText()
    {
        return $this->container['tax_text'];
    }

    /**
     * Sets tax_text
     *
     * @param string $tax_text 
     *
     * @return $this
     */
    public function setTaxText($tax_text)
    {
        $this->container['tax_text'] = $tax_text;

        return $this;
    }

    /**
     * Gets address_parent_name
     *
     * @return string
     */
    public function getAddressParentName()
    {
        return $this->container['address_parent_name'];
    }

    /**
     * Sets address_parent_name
     *
     * @param string $address_parent_name 
     *
     * @return $this
     */
    public function setAddressParentName($address_parent_name)
    {
        $this->container['address_parent_name'] = $address_parent_name;

        return $this;
    }

    /**
     * Gets address_contact_ref
     *
     * @return \Swagger\Client\Model\ModelContactAddress
     */
    public function getAddressContactRef()
    {
        return $this->container['address_contact_ref'];
    }

    /**
     * Sets address_contact_ref
     *
     * @param \Swagger\Client\Model\ModelContactAddress $address_contact_ref 
     *
     * @return $this
     */
    public function setAddressContactRef($address_contact_ref)
    {
        $this->container['address_contact_ref'] = $address_contact_ref;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string $tax_type 
     *
     * @return $this
     */
    public function setTaxType($tax_type)
    {
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type 
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets send_date
     *
     * @return \DateTime
     */
    public function getSendDate()
    {
        return $this->container['send_date'];
    }

    /**
     * Sets send_date
     *
     * @param \DateTime $send_date date the order was sent
     *
     * @return $this
     */
    public function setSendDate($send_date)
    {
        $this->container['send_date'] = $send_date;

        return $this;
    }

    /**
     * Gets address_parent_name2
     *
     * @return string
     */
    public function getAddressParentName2()
    {
        return $this->container['address_parent_name2'];
    }

    /**
     * Sets address_parent_name2
     *
     * @param string $address_parent_name2 
     *
     * @return $this
     */
    public function setAddressParentName2($address_parent_name2)
    {
        $this->container['address_parent_name2'] = $address_parent_name2;

        return $this;
    }

    /**
     * Gets address_name2
     *
     * @return string
     */
    public function getAddressName2()
    {
        return $this->container['address_name2'];
    }

    /**
     * Sets address_name2
     *
     * @param string $address_name2 
     *
     * @return $this
     */
    public function setAddressName2($address_name2)
    {
        $this->container['address_name2'] = $address_name2;

        return $this;
    }

    /**
     * Gets address_gender
     *
     * @return string
     */
    public function getAddressGender()
    {
        return $this->container['address_gender'];
    }

    /**
     * Sets address_gender
     *
     * @param string $address_gender 
     *
     * @return $this
     */
    public function setAddressGender($address_gender)
    {
        $this->container['address_gender'] = $address_gender;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\ModelContactAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\ModelContactAddress $address concatenation of address attributes acquired from Model_Contact->Model_ContactAddress
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency 
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets sum_net
     *
     * @return float
     */
    public function getSumNet()
    {
        return $this->container['sum_net'];
    }

    /**
     * Sets sum_net
     *
     * @param float $sum_net 
     *
     * @return $this
     */
    public function setSumNet($sum_net)
    {
        $this->container['sum_net'] = $sum_net;

        return $this;
    }

    /**
     * Gets sum_tax
     *
     * @return float
     */
    public function getSumTax()
    {
        return $this->container['sum_tax'];
    }

    /**
     * Sets sum_tax
     *
     * @param float $sum_tax 
     *
     * @return $this
     */
    public function setSumTax($sum_tax)
    {
        $this->container['sum_tax'] = $sum_tax;

        return $this;
    }

    /**
     * Gets sum_gross
     *
     * @return float
     */
    public function getSumGross()
    {
        return $this->container['sum_gross'];
    }

    /**
     * Sets sum_gross
     *
     * @param float $sum_gross 
     *
     * @return $this
     */
    public function setSumGross($sum_gross)
    {
        $this->container['sum_gross'] = $sum_gross;

        return $this;
    }

    /**
     * Gets sum_discounts
     *
     * @return float
     */
    public function getSumDiscounts()
    {
        return $this->container['sum_discounts'];
    }

    /**
     * Sets sum_discounts
     *
     * @param float $sum_discounts 
     *
     * @return $this
     */
    public function setSumDiscounts($sum_discounts)
    {
        $this->container['sum_discounts'] = $sum_discounts;

        return $this;
    }

    /**
     * Gets sum_net_foreign_currency
     *
     * @return float
     */
    public function getSumNetForeignCurrency()
    {
        return $this->container['sum_net_foreign_currency'];
    }

    /**
     * Sets sum_net_foreign_currency
     *
     * @param float $sum_net_foreign_currency 
     *
     * @return $this
     */
    public function setSumNetForeignCurrency($sum_net_foreign_currency)
    {
        $this->container['sum_net_foreign_currency'] = $sum_net_foreign_currency;

        return $this;
    }

    /**
     * Gets sum_tax_foreign_currency
     *
     * @return float
     */
    public function getSumTaxForeignCurrency()
    {
        return $this->container['sum_tax_foreign_currency'];
    }

    /**
     * Sets sum_tax_foreign_currency
     *
     * @param float $sum_tax_foreign_currency 
     *
     * @return $this
     */
    public function setSumTaxForeignCurrency($sum_tax_foreign_currency)
    {
        $this->container['sum_tax_foreign_currency'] = $sum_tax_foreign_currency;

        return $this;
    }

    /**
     * Gets sum_gross_foreign_currency
     *
     * @return float
     */
    public function getSumGrossForeignCurrency()
    {
        return $this->container['sum_gross_foreign_currency'];
    }

    /**
     * Sets sum_gross_foreign_currency
     *
     * @param float $sum_gross_foreign_currency 
     *
     * @return $this
     */
    public function setSumGrossForeignCurrency($sum_gross_foreign_currency)
    {
        $this->container['sum_gross_foreign_currency'] = $sum_gross_foreign_currency;

        return $this;
    }

    /**
     * Gets sum_discounts_foreign_currency
     *
     * @return float
     */
    public function getSumDiscountsForeignCurrency()
    {
        return $this->container['sum_discounts_foreign_currency'];
    }

    /**
     * Sets sum_discounts_foreign_currency
     *
     * @param float $sum_discounts_foreign_currency 
     *
     * @return $this
     */
    public function setSumDiscountsForeignCurrency($sum_discounts_foreign_currency)
    {
        $this->container['sum_discounts_foreign_currency'] = $sum_discounts_foreign_currency;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float $weight 
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets entry_type
     *
     * @return \Swagger\Client\Model\ModelEntryType
     */
    public function getEntryType()
    {
        return $this->container['entry_type'];
    }

    /**
     * Sets entry_type
     *
     * @param \Swagger\Client\Model\ModelEntryType $entry_type 
     *
     * @return $this
     */
    public function setEntryType($entry_type)
    {
        $this->container['entry_type'] = $entry_type;

        return $this;
    }

    /**
     * Gets costumer_internal_note
     *
     * @return string
     */
    public function getCostumerInternalNote()
    {
        return $this->container['costumer_internal_note'];
    }

    /**
     * Sets costumer_internal_note
     *
     * @param string $costumer_internal_note 
     *
     * @return $this
     */
    public function setCostumerInternalNote($costumer_internal_note)
    {
        $this->container['costumer_internal_note'] = $costumer_internal_note;

        return $this;
    }

    /**
     * Gets show_net
     *
     * @return bool
     */
    public function getShowNet()
    {
        return $this->container['show_net'];
    }

    /**
     * Sets show_net
     *
     * @param bool $show_net 
     *
     * @return $this
     */
    public function setShowNet($show_net)
    {
        $this->container['show_net'] = $show_net;

        return $this;
    }

    /**
     * Gets send_type
     *
     * @return string
     */
    public function getSendType()
    {
        return $this->container['send_type'];
    }

    /**
     * Sets send_type
     *
     * @param string $send_type 
     *
     * @return $this
     */
    public function setSendType($send_type)
    {
        $this->container['send_type'] = $send_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


